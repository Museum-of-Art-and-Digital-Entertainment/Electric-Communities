# This is the control file which is used to make the class 
# ec.e.run.RtEnqueue.
#LITERAL
// IMPORTANT NOTE: THIS FILE WAS GENERATED AUTOMATICALLY BY THE
// ARGMAKER TOOL. DO NOT EDIT THIS FILE WITH ANY EXPECTATIONS
// ABOUT ITS CONTINUED USE IN THE EDITED FORM.
//
// If you are interested in changing this file, then you probably
// actually want to do it by editing EnqueueMaker.txt.

package ec.e.run;

/**
 * This class has the official calls to enqueue messages on the E
 * run queue, including all the special forms, which are automatically-
 * generated by the EnqueueMaker tool.
 */
public class RtEnqueue
{
    /** Special zero-length array constant */
    static final Object[] ZeroLengthArray = new Object[0];

    /** This class is uninstantiable. */
    private RtEnqueue() {
    }
#PATTERN

    /**
     * #COUNT# argument variant of enqueue.
     * NOTE: DO NOT EDIT THIS FILE. See comment at the top.
     */
    static public void enq(RtTether target, RtSealer sealer, 
        RtExceptionEnv ee#DECL#) {
        if (Thread.currentThread() == RtRun.OurThread) {
            // two things if we're actually running in the E thread:
            // 1. causality tracing can work
            // 2. we don't need to synch on the vat lock since it's
            // necessarily already locked
            if (RtCausality.TheCausalityTracing) {
                RtCausality.enqueueWithCausality(RtRun.TheQ, target, sealer,
                    ee, #ARRAY#);
            } else {
                RtRun.TheQ.enqueue(
                    RtQObj.make(target, sealer, ee#USE#));
            }
        } else {
            synchronized (RtRun.TheVatLock) {
                RtRun.TheQ.enqueue(
                    RtQObj.make(target, sealer, ee#USE#));
                if (RtRun.TheNeedsNotify) {
                    RtRun.TheVatLock.notify();
                }
            }
        }
    }
#CASE array
#CASE 0
#CASE 1
#CASE 2
#CASE 3
#CASE 4
#CASE 5
#CASE 6
#CASE 7
#CASE 8
#CASE 9
#CASE 10
#CASE 11
#CASE 12
#CASE 13
#CASE 14
#CASE 15
#CASE 16
#LITERAL
}
#END
