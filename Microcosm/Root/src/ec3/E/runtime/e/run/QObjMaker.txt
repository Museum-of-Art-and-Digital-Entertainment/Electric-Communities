# This is the control file which is used to make the class 
# ec.e.run.RtQObj.
#LITERAL
// IMPORTANT NOTE: THIS FILE WAS GENERATED AUTOMATICALLY BY THE
// ARGMAKER TOOL. DO NOT EDIT THIS FILE WITH ANY EXPECTATIONS
// ABOUT ITS CONTINUED USE IN THE EDITED FORM.
//
// If you are interested in changing this file, then you probably
// actually want to do it by editing QObjMaker.txt.
package ec.e.run;

// A helper class for message queues
public class RtQObj
extends Object
{
    /** Special zero-length array constant */
    static final Object[] ZeroLengthArray = new Object[0];

    static private RtQObj[] TheCache = null;
    static private int TheCacheMax = 0;
    static private int TheCacheSize = 0;
    static private Object[][] TheArgsCache = new Object[16][];
    static private int TheNextSeqNum = 0;

    private RtTether myTarget;
    private RtSealer mySealer;
    private RtExceptionEnv myEE;
    private Object[] myArgs;
    private boolean myArgsAreSafe;
    private int mySeqNum;

    /** Only this class can instantiate itself. You get a "new" one
     * of these with the "make" method. */
    private RtQObj() {
    }

    public String toString() {
        return "#" + mySeqNum + " " + 
            RtEnvelope.messageToString(myTarget, mySealer, myArgs, myEE);
    }

    public RtTether getTarget() {
        return myTarget;
    }

    public RtSealer getSealer() {
        return mySealer;
    }

    public RtExceptionEnv getKeeper() {
        return myEE;
    }

    public int getArgCount() {
        return myArgs.length;
    }

    public Object getArg(int n) {
        return myArgs[n];
    }

    public int getSeqNum() {
        return mySeqNum;
    }

    /** Note, this intentionally clones the args. */
    public Object[] getArgs() {
        int len = myArgs.length;
        if (len == 0) {
            return myArgs;
        } else {
            Object[] result = new Object[len];
            System.arraycopy(myArgs, 0, result, 0, len);
            return result;
        }
    }

    /** Deliver the message in this RtQObj and immediately recycle
     * the object. It is not appropriate to hold onto an RtQObj
     * after having called this method.
     */
    public final void run() {
        // any setting up of exception env must be done explicitly
        // by a tether/eobject
        RtRun.CurrentExceptionEnv = null;

        try {
            if (myTarget instanceof EObject_$_Impl) {
                myTarget.invokeNow(mySealer, myArgs, myEE);
            } else {
                myTarget.invokeNow(mySealer, getArgs(), myEE);
            }
        } catch (Throwable e) {
            RtRun.tr.errorm("Uncaught Throwable made it all the way to " +
                "the top; This shouldn't happen, but we'll be nice " +
                "and turn it into an ethrow like a happyhappy citizen.");
            RtRun.tr.errorReportException(e, 
                "Uncaught Throwable during send of " + this);
            if (RtCausality.TheOne.myCausalityTracing) {
                String causalityTrace = RtCausality.getCausalityTraceString();
                RtRun.tr.errorm("Causality trace:");
                RtRun.tr.errorm(causalityTrace);
            }
            RtExceptionEnv.sendException(myEE, e);
        } finally {
            RtRun.CurrentExceptionEnv = null;
        }

        // put this into the cache
        if (TheCacheSize == TheCacheMax) {
            // we need to grow the cach
            int newMax = (TheCacheMax * 3) / 2 + 100;
            RtQObj[] newCache = new RtQObj[newMax];
            if (TheCacheMax != 0) {
                System.arraycopy(TheCache, 0, newCache, 0, TheCacheMax);
            }
            TheCache = newCache;
            TheCacheMax = newMax;
        }
        TheCache[TheCacheSize] = this;
        TheCacheSize++;

        // if the args are safe, re-cache the array
        if (myArgsAreSafe) {
            int len = myArgs.length;
            // null out the slots; we don't want to leak!
            switch (len) {
                // note: cases fall-through
                case 16: myArgs[15] = null;
                case 15: myArgs[14] = null;
                case 14: myArgs[13] = null;
                case 13: myArgs[12] = null;
                case 12: myArgs[11] = null;
                case 11: myArgs[10] = null;
                case 10: myArgs[9]  = null;
                case 9:  myArgs[8]  = null;
                case 8:  myArgs[7]  = null;
                case 7:  myArgs[6]  = null;
                case 6:  myArgs[5]  = null;
                case 5:  myArgs[4]  = null;
                case 4:  myArgs[3]  = null;
                case 3:  myArgs[2]  = null;
                case 2:  myArgs[1]  = null;
                    // case 1 omitted; we zap it below
            }
            // use slot 0 as a link pointer
            myArgs[0] = TheArgsCache[len];
            TheArgsCache[len] = myArgs;
        }

        // don't forget to null everything out--we don't want to leak
        // this stuff.
        myTarget = null;
        mySealer = null;
        myArgs = null;
        myEE = null;
    }
#VARIABLE MAKE-HEAD
        if (t == null) {
            throw new RtRuntimeException(
                "tried to make message with null target");
        }
        if (s == null) {
            throw new RtRuntimeException(
                "tried to make message with null sealer");
        }

        RtQObj me;
        // get it from the cache if possible; otherwise make a new one
        if (TheCacheSize != 0) {
            TheCacheSize--;
            me = TheCache[TheCacheSize];
        } else {
            me = new RtQObj();
        }

        me.myTarget = t;
        me.mySealer = s;
        me.myEE = e;
        me.mySeqNum = TheNextSeqNum;
        TheNextSeqNum++;
#LITERAL

    /** Make a "new" (probably actually recycled) RtQObj, with the
     * given message parameters.
     */
    static public RtQObj make(RtTether t, RtSealer s, 
            RtExceptionEnv e, Object[] a) {
        #MAKE-HEAD#
        if (a == null) {
            throw new RtRuntimeException(
                "tried to make message with null args");
        }

        me.myArgs = a;
        me.myArgsAreSafe = false;
        
        return me;
    }

    /** zero-arg special case make. */
    static public RtQObj make(RtTether t, RtSealer s, RtExceptionEnv e) {
        #MAKE-HEAD#

        me.myArgs = ZeroLengthArray;
        me.myArgsAreSafe = false;

        return me;
    }
#PATTERN

    /** #COUNT# argument special case make. 
     *  NOTE: This file was automatically generated. Do not edit it.
     *  See comment at top.
     */
    static public RtQObj make(RtTether t, RtSealer s, 
            RtExceptionEnv e#DECL#) {
        #MAKE-HEAD#

        // get a cached array if possible
        Object[] a = TheArgsCache[#COUNT#];
        if (a != null) {
            // follow link pointer
            TheArgsCache[#COUNT#] = (Object[]) a[0];
        } else {
            a = new Object[#COUNT#];
        }

        #ASSIGN#

        me.myArgs = a;
        me.myArgsAreSafe = true;

        return me;
    }
#CASE 1
#CASE 2
#CASE 3
#CASE 4
#CASE 5
#CASE 6
#CASE 7
#CASE 8
#CASE 9
#CASE 10
#CASE 11
#CASE 12
#CASE 13
#CASE 14
#CASE 15
#CASE 16
#LITERAL
}
#END
