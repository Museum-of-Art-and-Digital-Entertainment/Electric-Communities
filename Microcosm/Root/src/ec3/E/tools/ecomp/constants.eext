# 1 "ec/ecomp/constants.java" 
/* ************************************************************************
 * Espresso! Constants
 * Copyright 1995, 1996, 1997 Martin Odersky. All rights reserved.
 *
 * Author     : Martin Odersky, Michael Philippsen
 * Last change: 13-November-97
 *************************************************************************/


package ec.ecomp;




interface NumericConstants {

/** minimal and maximal values of bytes, shorts, chars:
 */
    static final byte MIN_BYTE = -0x80;
    static final byte MAX_BYTE = 0x7F;
    
    static final short MIN_SHORT = -0x8000;
    static final short MAX_SHORT = 0x7FFF;
    
    static final char MIN_CHAR = 0;
    static final char MAX_CHAR = 0xFFFF;
}

interface Symbols {
    byte Id = 1;
    byte CharLit = 2;
    byte StringLit = 3;
    byte IntLit = 4;
    byte LongLit = 5;
    byte FloatLit = 6;
    byte DoubleLit = 7;
    byte Period = 10;
    byte Comma = 11;
    byte Semicolon = 12;
    byte Lparen = 13;
    byte Rparen = 14;
    byte Lbrack = 15;
    byte Rbrack = 16;
    byte Lbrace = 17;
    byte Rbrace = 18;
    byte Plus = 20;
    byte Minus = 21;
    byte Bang = 22;
    byte Percent = 23;
    byte Uparrow = 24;
    byte Ampersand = 25;
    byte Star = 26;
    byte Bar = 27;
    byte Tilde = 28;
    byte Slash = 29;
    byte Greater = 30;
    byte Less = 31;
    byte Questionmark = 32;
    byte Colon = 33;
    byte Equals = 34;
    byte PlusPlus = 35;
    byte MinusMinus = 36;
    byte EqualsEquals = 37;
    byte LessEquals = 38;
    byte GreaterEquals = 39;
    byte BangEquals = 40;
    byte LessLess = 41;
    byte GreaterGreater = 42;
    byte GreaterGreaterGreater = 43;
    byte PlusEquals = 44;
    byte MinusEquals = 45;
    byte StarEquals = 46;
    byte SlashEquals = 47;
    byte AmpersandEquals = 48;
    byte BarEquals = 49;
    byte UparrowEquals = 50;
    byte PercentEquals = 51;
    byte LessLessEquals = 52;
    byte GreaterGreaterEquals = 53;
    byte GreaterGreaterGreaterEquals = 54;
    byte BarBar = 55;
    byte AmpersandAmpersand = 56;
    byte AbstractSy = 57;
    byte BreakSy = 58;
    byte CaseSy = 59;
    byte CatchSy = 60;
    byte ClassSy = 61;
    byte ConstSy = 62;
    byte ContinueSy = 63 ;
    byte DefaultSy = 64;
    byte DoSy = 65;
    byte ElseSy = 66;
    byte ExtendsSy = 67;
    byte FinalSy = 68;
    byte FinallySy = 69;
    byte ForSy = 70;
    byte IfSy = 71;
    byte ImplementsSy = 72;
    byte ImportSy = 73;
    byte InterfaceSy = 74;
    byte NativeSy = 75;
    byte NewSy = 76;
    byte PackageSy = 77;
    byte PrivateSy = 78;
    byte ProtectedSy = 79;
    byte PublicSy = 80;
    byte ReturnSy = 81;
    byte StaticSy = 82;
    byte SuperSy = 83;
    byte SwitchSy = 84;
    byte SynchronizedSy = 85;
    byte ThisSy = 86;
    byte VolatileSy = 87;
    byte ThrowSy = 88;
    byte ThrowsSy = 89;
    byte TransientSy = 90;
    byte TrySy = 91;
    byte WhileSy = 92;
    byte InstanceofSy = 93;
    byte BooleanSy = 94;
    byte ByteSy = 95;
    byte CharSy = 96;
    byte DoubleSy = 97;
    byte FloatSy = 98;
    byte IntSy = 99;
    byte LongSy = 100;
    byte ShortSy = 101;
    byte VoidSy = 102;
    byte NullSy = 103;
    byte FunSy = 104;
    byte SeqSy = 105;
    byte RightArrow = 106;


    // additional Symbols for E extension of Java:
    byte eClassSy = 107;
    byte eInterfaceSy = 108;
    byte eMethodSy = 109;
    byte eTrySy = 110;
    byte eThrowSy = 111;
    byte eWhenSy = 112;
    byte eOrWhenSy = 113;
    byte eWheneverSy = 114;
    byte eIfSy = 115;
    // byte eOrIfSy = 116;
    byte eCatchSy = 116;
    byte eSend = 117;
    byte eTrueSy = 118;
    byte eFalseSy = 119;
    byte eNullSy = 120;
    byte eLocalSy = 121;
    byte eDebugSy = 122;
    byte eKeepSy = 123;
    byte eDeflectSy = 124;    
    
    byte NoSy = (byte)(eDeflectSy+(byte)1);



    byte EofSy = (byte)(NoSy+(byte)1);
    byte lastSy = EofSy;
}

interface SyntaxConstants {

/** see Scanner.pos for an explanation.
 */
    static final int LINESHIFT = 10;

/** Operator precedences:
 */
    static final int postfixPrec = 11;
    static final int prefixPrec = 10;
    static final int mulPrec = 9;
    static final int addPrec = 8;
    static final int shiftPrec = 7;
    static final int ordPrec = 6;
    static final int eqPrec = 5;
    static final int bitandPrec = 4;
    static final int bitxorPrec = 3;
    static final int bitorPrec = 2;
    static final int andPrec = 1;
    static final int orPrec = 0;
    static final int condPrec = -1;
    static final int assignPrec = -2;
    static final int noPrec = -3;
}

interface ASTTags {
    int ERROR = 0;

    int IDENT = 1;
    int SELECT = 2;
    int VARDEF = 3;
    int CONDEXPR = 4;

    int APPLY = 5;
    int SUBSCRIPT = 6;
    int NEW = 7;
    int DOLOOP = 8;
    int AGGREGATE = 9;
    int WHILELOOP = 10;
    int FORLOOP = 11;
    int RETURN = 12;
    int THROW = 13;
    int LABELLED = 14;
    int SEQ = 15;
    int CLASSDEF = 16;
    int BLOCK = 17;
    int TRY = 18;
    int CASE = 19;
    int SYNCHRON = 20;
    int SWITCH = 21;

    int BREAK = 23;
    int CONTINUE = 24;
    int PACKAGE = 25;
    int IMPORT = 26;
    int EXEC = 27;
    int CONDSTAT = 28;
    int TOPLEVEL = 29;
    
/* aBINOP:
 */
    int OR = 30;
    int AND = 31;
    int EQ = 32;
    int NE = 33; 
    int LT = 34;
    int GT = 35;
    int LE = 36;
    int GE = 37;
    int BITOR = 38;
    int BITXOR = 39;
    int BITAND = 40;
    int SL = 41;
    int SR = 42;
    int LSR = 43;
    int PLUS = 44;
    int MINUS = 45;
    int TIMES = 46;
    int DIV = 47;
    int MOD = 48;

/* anASSIGNOP:
 */
    int ASSIGN = 49;
    int ABITOR = 50;
    int ABITXOR = 51;
    int ABITAND = 52;
    int ASL = 53;
    int ASR = 54;
    int ALSR = 55;
    int APLUS = 56;
    int AMINUS = 57;
    int ATIMES = 58;
    int ADIV = 59;
    int AMOD = 60;


    // E-Extension: additionally ESEND

    int ESEND = 61;
    int LastASSIGNOP = ESEND;
    int EKEEP = 64;




/* aTYPEOP:
 */
    int TYPETEST = 62;
    int CAST = 63;
    
/* aFUNDEF
 */
    int FUNDEF = 65;
    int CATCH = 66;
    int LAMBDA = 67;


/* aUNOP:
 */
    int POS = 71;
    int NEG = 72;
    int NOT = 73;
    int COMPL = 74;
    int PREINC = 75;
    int PREDEC = 76;
    int POSTINC = 77;
    int POSTDEC = 78;


    // E-Extension: additionally EDISTRIB

    int EDISTRIB = 79;
    int LastUNOP = 79;



    
/* aSELF:
 */
    int THIS = 80;
    int SUPER = 81;

/* aLITERAL
 */
    int INTLIT = 90;
    int LONGLIT = 91;
    int FLOATLIT = 92;
    int DOUBLELIT = 93;
    int CHARLIT = 94;
    int STRINGLIT = 95;

/** used for Java extensions
 */
    int FUNCTIONTYPE = 96;
    int ANNOTTYPE = 97;


    int EWHEN = 100;

}

interface SemanticConstants {

/* Kinds:
 */
    int PCK = 0x01;
    int TYP = 0x02;
    int VAR = 0x04;
    int VAL = 0x0C;
    int FUN = 0x10;
    int ANY = 0x1F;
    int CONSTR = 0x20;
    
// FIX21/10/96 add error kinds for name error objects.
    int BAD = 0x100;
    int AMBIGUOUS = 0x100;
    int LOADERROR = 0x101;
    int HIDDEN = 0x102;
    int ABSENT_VAR = 0x103;
    int ABSENT_FUN = 0x104;
    int ABSENT_TYPE = 0x105;

/** type tags:
 */
    int ERRTYP =0;
//  int PBYTE =1;
    int BYTE = 2;
//  int PSHORT = 3;
    int CHAR = 4;
    int SHORT = 5;
    int INT = 6;
    int LONG = 7;    
    int FLOAT = 8;
    int DOUBLE = 9;
    int BOOLEAN = 10;
    int CLASS = 11;
    int VOID = 12;
    int ARRAY = 13;
    int FUNCTION = 14;
    int NULLTYP = 15;
    int ANYTYP = 16;
    int PACKAGETYP = 17;
    int lastTypTag = 17;

/** modifiers:
 */
    int PUBLIC       = 0x0001;
    int PRIVATE      = 0x0002;
    int PROTECTED    = 0x0004;
    int STATIC       = 0x0008;
    int FINAL        = 0x0010;
    int SYNCHRONIZED = 0x0020;
    int VOLATILE     = 0x0040;
    int TRANSIENT    = 0x0080;
    int NATIVE       = 0x0100;
    int INTERFACE    = 0x0200;
    int ABSTRACT     = 0x0400;

    int Nmods = 11;


/** modifiers for E-Extension
 */
    int ECATCH       = 0x10000;
    int ECLASS       = 0x20000;
    int EMETHOD      = 0x40000;
    int EFORALL      = 0x80000;
    int ELOCAL       = 0x100000;
    int EKEEPMOD     = 0x200000;


/** modifier masks:
 */
    int ClassMods = PUBLIC | FINAL | INTERFACE | ABSTRACT;
    int InterfaceVarMods = PUBLIC | FINAL | STATIC;
    int VarMods = InterfaceVarMods | PRIVATE | PROTECTED | VOLATILE 
        | TRANSIENT;
    int InterfaceMethMods = ABSTRACT | PUBLIC;
    int ConstrMods = PUBLIC | PRIVATE | PROTECTED;
    int MethMods = ConstrMods | ABSTRACT | STATIC | NATIVE |
      SYNCHRONIZED | FINAL;

    int EMethMods = PUBLIC | EMETHOD;

}

interface ByteCodeTags {

/** opcodes:
 */
    final static int 
        illegal = -1,
        nop     = 0,
        aconst_null     = 1,
        iconst_m1       = 2,
        iconst_0 = 3,
        iconst_1 = 4,
        iconst_2 = 5,
        iconst_3 = 6,
        iconst_4 = 7,
        iconst_5 = 8,
        lconst_0 = 9,
        lconst_1 = 10,
        fconst_0 = 11,
        fconst_1 = 12,
        fconst_2 = 13,
        dconst_0 = 14,
        dconst_1 = 15,
        bipush = 16,
        sipush  = 17,
        ldc1    = 18,
        ldc2    = 19,
        ldc2w   = 20,
        iload   = 21,
        lload   = 22,
        fload   = 23,
        dload   = 24,
        aload   = 25,
        iload_0 = 26,
        iload_1 = 27,
        iload_2 = 28,
        iload_3 = 29,
        lload_0 = 30,
        lload_1 = 31,
        lload_2 = 32,
        lload_3 = 33,
        fload_0 = 34,
        fload_1 = 35,
        fload_2 = 36,
        fload_3 = 37,
        dload_0 = 38,
        dload_1 = 39,
        dload_2 = 40,
        dload_3 = 41,
        aload_0 = 42,
        aload_1 = 43,
        aload_2 = 44,
        aload_3 = 45,
        iaload  = 46,
        laload  = 47,
        faload  = 48,
        daload  = 49,
        aaload  = 50,
        baload  = 51,
        caload  = 52,
        saload  = 53,
        istore  = 54,
        lstore  = 55,
        fstore  = 56,
        dstore  = 57,
        astore  = 58,
        istore_0 = 59,
        istore_1 = 60,
        istore_2 = 61,
        istore_3 = 62,
        lstore_0 = 63,
        lstore_1 = 64,
        lstore_2 = 65,
        lstore_3 = 66,
        fstore_0 = 67,
        fstore_1 = 68,
        fstore_2 = 69,
        fstore_3 = 70,
        dstore_0 = 71,
        dstore_1 = 72,
        dstore_2 = 73,
        dstore_3 = 74,
        astore_0 = 75,
        astore_1 = 76,
        astore_2 = 77,
        astore_3 = 78,
        iastore = 79,
        lastore = 80,
        fastore = 81,
        dastore = 82,
        aastore = 83,
        bastore = 84,
        castore = 85,
        sastore = 86,
        pop     = 87,
        pop2    = 88,
        dup     = 89,
        dup_x1  = 90,
        dup_x2  = 91,
        dup2    = 92,
        dup2_x1 = 93,
        dup2_x2 = 94,
        swap    = 95,
        iadd    = 96,
        ladd    = 97,
        fadd    = 98,
        dadd    = 99,
        isub    = 100,
        lsub    = 101,
        fsub    = 102,
        dsub    = 103,
        imul    = 104,
        lmul    = 105,
        fmul    = 106,
        dmul    = 107,
        idiv    = 108,
        ldiv    = 109,
        fdiv    = 110,
        ddiv    = 111,
        imod    = 112,
        lmod    = 113,
        fmod    = 114,
        dmod    = 115,
        ineg    = 116,
        lneg    = 117,
        fneg    = 118,
        dneg    = 119,
        ishl    = 120,
        lshl    = 121,
        ishr    = 122,
        lshr    = 123,
        iushr   = 124,
        lushr   = 125,
        iand    = 126,
        land    = 127,
        ior     = 128,
        lor     = 129,
        ixor    = 130,
        lxor    = 131,
        iinc    = 132,
        i2l     = 133,
        i2f     = 134,
        i2d     = 135,
        l2i     = 136,
        l2f     = 137,
        l2d     = 138,
        f2i     = 139,
        f2l     = 140,
        f2d     = 141,
        d2i     = 142,
        d2l     = 143,
        d2f     = 144,
        int2byte        = 145,
        int2char        = 146,
        int2short       = 147,
        lcmp    = 148,
        fcmpl   = 149,
        fcmpg   = 150,
        dcmpl   = 151,
        dcmpg   = 152,
        ifeq    = 153,
        ifne    = 154,
        iflt    = 155,
        ifge    = 156,
        ifgt    = 157,
        ifle    = 158,
        if_icmpeq       = 159,
        if_icmpne       = 160,
        if_icmplt       = 161,
        if_icmpge       = 162,
        if_icmpgt       = 163,
        if_icmple       = 164,
        if_acmpeq       = 165,
        if_acmpne       = 166,
        goto_   = 167,
        jsr     = 168,
        ret     = 169,
        tableswitch     = 170,
        lookupswitch    = 171,
        ireturn = 172,
        lreturn = 173,
        freturn = 174,
        dreturn = 175,
        areturn = 176,
        return_ = 177,
        getstatic       = 178,
        putstatic       = 179,
        getfield        = 180,
        putfield        = 181,
        invokevirtual   = 182,
        invokenonvirtual        = 183,
        invokestatic    = 184,
        invokeinterface = 185,
        newfromname     = 186,
        new_    = 187,
        newarray        = 188,
        anewarray       = 189,
        arraylength     = 190,
        athrow  = 191,
        checkcast       = 192,
        instanceof_     = 193,
        monitorenter    = 194,
        monitorexit     = 195,
        wide            = 196,
        multianewarray  = 197,
        if_acmp_null    = 198,
        if_acmp_nonnull = 199,
        goto_w          = 200,
        jsr_w           = 201,
        breakpoint      = 202;

    static final int last_opcode = breakpoint;

/** virtual opcodes; used for constant folding
 */
    final int 
        string_add = 256,
        bool_not = 257,
        bool_and = 258,
        bool_or = 259;
}

/** tags for class file sections.
 */
interface CPTags {

    int CONSTANT_Utf8 = 1;
    int CONSTANT_Unicode = 2;
    int CONSTANT_Integer = 3;
    int CONSTANT_Float = 4;
    int CONSTANT_Long = 5;
    int CONSTANT_Double = 6; 
    int CONSTANT_Class = 7;
    int CONSTANT_String = 8;
    int CONSTANT_Fieldref = 9;
    int CONSTANT_Methodref = 10;
    int CONSTANT_InterfaceMethodref = 11;
    int CONSTANT_NameandType = 12;
}

interface CodeConstants {

/** addressmodes:
 */
    final static int 
        VOIDmode = 0,
        STACKmode = 1,
        INDEXEDmode = 2,
        THISmode = 3,
        SUPERmode = 4,
        LOCALmode = 5,
        CLASSmode = 6,
        FIELDmode = 7,
        METHmode = 8,
        IMMEDIATEmode = 9,
        NEWARRAYmode = 10,
        ASSIGNmode = 11,
        CONDmode = 12;
    

/** type codes:
 */
    final static int
        INTcode = 0,
        LONGcode = 1,
        FLOATcode = 2,
        DOUBLEcode = 3,
        OBJECTcode = 4,
        BYTEcode = 5,
        CHARcode = 6,
        SHORTcode = 7;

/** shift * mask constants for shifting prefix instructions.
 *  a pair of instruction codes such as LCMP ; IFEQ is encoded 
 *  in Predef as (LCMP << preShift) + IFEQ.
 */
    final int preShift = 9;
    final int preMask  = 0x01FF;
}


interface Constants extends 
    NumericConstants,
    Symbols,
    SyntaxConstants,
    ASTTags, 
    SemanticConstants,
    ByteCodeTags,
    CPTags,
    CodeConstants {}

