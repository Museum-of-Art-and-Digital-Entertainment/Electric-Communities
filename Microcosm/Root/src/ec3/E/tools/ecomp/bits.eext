# 1 "ec/ecomp/bits.java" 
/* ************************************************************************
 * Espresso! Bit sets
 * Copyright 1995 Martin Odersky. All rights reserved.
 * 
 * Author     : Martin Odersky.
 * Last change: 13-Mar-96
 *************************************************************************/


package ec.ecomp;
# 13 "ec/ecomp/bits.java" 


class Bits {

    final int wordlen = 32;
    final int wordshift = 5;
    final int wordmask = wordlen - 1;

    private int[] bits;

    public Bits() {
        this(new int[1]);
    }

    public Bits(int[] bits) {
        this.bits = bits;
    }

    public Bits(int lo, int hi) {
        this();
        for (int i = lo; i < hi; i++) incl(i);
    }

    private void sizeTo(int len) {
        if (bits.length < len) {
            int[] newbits = new int[len];
            System.arraycopy(bits, 0, newbits, 0, bits.length);
            bits = newbits;
        }
    }

/** this set = {}.
 */
    public void clear() {
        for (int i = 0; i < bits.length; i++) bits[i] = 0;
    }

/** return a copy of this set.
 */
    public Bits dup() {
        int[] newbits = new int[bits.length];
        System.arraycopy(bits, 0, newbits, 0, bits.length);
        return new Bits(newbits);
    }

/** include x in this set. do nothing if x < 0.
 */
    public void incl(int x) {
        if (x >= 0) {
            sizeTo((x >>> wordshift) + 1);
            bits[x >>> wordshift] = bits[x >>> wordshift] | 
                (1 << (x & wordmask));
        }
    }


/** exclude x from this set. do nothing if x < 0.
 */
    public void excl(int x) {
        if (x >= 0) {
            sizeTo((x >>> wordshift) + 1);
            bits[x >>> wordshift] = bits[x >>> wordshift] & 
                ~(1 << (x & wordmask));
        }
    }

/** is x an element of this set?
 */
    public boolean member(int x) {
        return 
            0 <= x && x < (bits.length << wordshift) && 
            (bits[x >>> wordshift] & (1 << (x & wordmask))) != 0;
    }

/** this set = xs.
 */
    public void assign(Bits xs) {
        sizeTo(xs.bits.length);
        for (int i = 0; i < xs.bits.length; i++) bits[i] = xs.bits[i];
    }

/** this set = this set & xs.
 */
    public void andSet(Bits xs) {
        sizeTo(xs.bits.length);
        for (int i = 0; i < xs.bits.length; i++) 
          bits[i] = bits[i] & xs.bits[i];
    }

/** this set = this set | xs.
 */
    public void orSet(Bits xs) {
        sizeTo(xs.bits.length);
        for (int i = 0; i < xs.bits.length; i++) 
          bits[i] = bits[i] | xs.bits[i];
    }

/** overrides Object.
 */
    public String toString() {
        char[] digits = new char[bits.length * wordlen];
        for (int i = 0; i < bits.length * wordlen; i++) 
            digits[i] = member(i) ? '1' : '0';
        return new String(digits);
    }
}
