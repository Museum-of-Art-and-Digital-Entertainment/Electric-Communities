# 1 "ec/ecomp/basic.java" 
/* ************************************************************************
 * Espresso! Basic constants and utility routines.
 * Copyright 1995, 1996, 1997 Martin Odersky. All rights reserved.
 * 
 * Author     : Martin Odersky, Michael Philippsen
 * Last change: 26-November-97
 *************************************************************************/


package ec.ecomp;




import java.io.*;
import java.util.Vector;


/** All non-final switches can be toggled by command line arguments
 */
class Switches {
    static boolean verbose = false;
    static boolean obfuscate = false;

    static boolean printTree = false;
    static boolean promptOnError = false;
    static boolean printSearch = false;
    static boolean debugInfo = false;

/** language extensions on/off.
 */
    static boolean extended = false;

    static boolean printE2jTree = false;
    static boolean prePrintTree = false;
    static boolean cafeSucks = false;
    static boolean WithDebugCode = false;
    static boolean noWarn = false;
    static boolean noOutput = false;

 
/** assertion checking on/off; 
 *  classfile attribute monitoring on/off; 
 *  debug code on/off.
 */
    static final boolean checks = false;
    static final boolean checkAttributes = false;

    static final boolean debugFlag = false;




/** read all of class file / only the parts relevant for compilation
 */
    static final boolean readAllOfClassFile = false;
}

/** Exception signals an internal error (i.e. a bug)
 */
class CompilerError extends RuntimeException {
    CompilerError(String s) {
        super(s);
    }
}

/** Exception signals that some implementation limit was exceeded.
 */
class CapacityExceeded extends RuntimeException {
    CapacityExceeded(String s) {
        super(s);
    }
}

/** Some useful values and utility routines that don't fit anywhere else.
 */
class Basic {

/** A value for null:
 */
    static Object nullValue = new Object();

/** Assorted strings:
 */
    static Name initS = Name.fromString("<init>");
    static Name clinitS = Name.fromString("<clinit>");

/** assertions for internal error checking:
 */
    static void assert(boolean c) {
        if (!c)
            throw new CompilerError("assertion failed");
    }

/** convert an array of objects to a string:
 */
    static String toString(Object a[]) {
        if (a == null || a.length == 0) 
            return "";
        String s = a[0].toString();
        for (int i = 1; i < a.length; i++) {
            s = s + ", " + a[i].toString();
        }
        return s;
    }

/** return the absolute path of the file with name fileName:
 */
    static String absolutePathName(String fileName) {
        File f = new File(fileName);
        return f.getAbsolutePath();
    }

/** return the parent of the file with name fileName:
 */
    static String parentName(String fileName) {
        File f = new File(fileName);
        return f.getParent();
    }

}

/** support for pretty-printing syntax trees
 */
class Pretty {

/** indentaion width:
 */
    static int width = 3;

/** the current left margin:
 */
    static int lmargin = 0;

/** align to lmargin:
 */
    static void align () {
        for (int i = 0; i < lmargin; i++) System.out.print(" ");
    }

/** indent left margin:
 */
    static void indent() {
        lmargin = lmargin + width;
    }

/** reverse indentation:
 */
    static void undent() {
        lmargin = lmargin - width;
    }

/** enter new precedence level:
 */
    static void open(int contextPrec, int ownPrec) {
        if (ownPrec < contextPrec) System.out.print("(");
    }

/** leave precedence level:
 */
    static void close(int contextPrec, int ownPrec) {
        if (ownPrec < contextPrec) System.out.print(")");
    }
}















