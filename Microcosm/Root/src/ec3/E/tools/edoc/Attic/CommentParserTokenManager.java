/* Generated By:JavaCC: Do not edit this line. CommentParserTokenManager.java */
package ec.edoc;

public class CommentParserTokenManager implements CommentParserConstants
{
  protected static final String jjadd_escapes(String str) {
    String retval = "";
    char ch;
    for (int i = 0; i < str.length(); i++) {
      if ((ch = str.charAt(i)) == 0) continue;
      if (ch == '\b') {
        retval += "\\b";
      } else if (ch == '\t') {
        retval += "\\t";
      } else if (ch == '\n') {
        retval += "\\n";
      } else if (ch == '\f') {
        retval += "\\f";
      } else if (ch == '\r') {
        retval += "\\r";
      } else if (ch == '\"') {
        retval += "\\\"";
      } else if (ch == '\'') {
        retval += "\\\'";
      } else if (ch == '\\') {
        retval += "\\\\";
      } else if (ch < 0x20 || ch > 0x7e) {
        String s = "0000" + Integer.toString(ch, 16);
        retval += "\\u" + s.substring(s.length() - 4, s.length());
      } else {
        retval += ch;
      }
    }
    return retval;
  }

static final long[] jjbitVec0 = { 0x1L, 0x0L,
              0xffffffffffffffffL, 0xffffffffffffffffL };
static private final void jjMoveNfa_0(int[] oldStates, int[] newStates)
{
   int j, k;
   MainLoop :
   for (;;)
   {
      if (curChar < 64)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << curChar;
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  if ((0x40000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 17:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates15;
                     break;
                  }
                  else continue;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates15;
                     break;
                  }
                  else continue;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates17;
                     break;
                  }
                  else continue;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates19;
                     break;
                  }
                  else continue;
               case 20:
                  if ((0xfffffffeffffdbffL & l) != 0L)
                  {
                     if (jjcurKind > 26)
                        jjcurKind = 26;
                     newStates[jjnewStateCnt + 0] = 20;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 21:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates20;
                     break;
                  }
                  else continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else if (curChar < 128)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << (curChar & 077);
         do
         {
            switch(oldStates[--i])
            {
               case 9:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 8;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 8:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 7;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 7:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 6;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 6:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 5;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 5:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 4;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 4:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 3;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 3:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 2;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 2:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 1;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 1:
                  if ((0x1000000000L & l) != 0L)
                  {
                     if (jjcurKind > 19)
                        jjcurKind = 19;
                     continue;
                  }
                  else continue;
               case 16:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 15;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 15:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 14;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 14:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 13;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 13:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 12;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 12:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 11;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 11:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 10;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 10:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 19)
                        jjcurKind = 19;
                     continue;
                  }
                  else continue;
               case 19:
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     continue;
                  }
                  else continue;
               case 22:
                  if ((0x100000001000000L & l) != 0L)
                  {
                     jjnextStates = jjstates18;
                     break;
                  }
                  else continue;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     jjnextStates = jjstates17;
                     break;
                  }
                  else continue;
               case 20:
                     if (jjcurKind > 26)
                        jjcurKind = 26;
                     newStates[jjnewStateCnt + 0] = 20;
                     jjnewStateCnt += 1;
                     continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         int i2 = (curChar & 0xff) >> 6;
         int i1 = ((curChar >> 8) & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         long l1 = 1L << ((curChar >> 8) & 077);
         Outer:
         do
         {
            switch(oldStates[--i])
            {
               case 20:
                  MatchLoop:
                  for(;;)
                  {
                     switch((curChar >> 8))
                     {
                        case 0:
                           if ((jjbitVec0[i2] & l2) == 0L)
                              continue Outer;
                           break MatchLoop;
                        default : break;
                     }
                     continue Outer;
                  }
                  if (jjcurKind > 26)
                     jjcurKind = 26;
                     newStates[jjnewStateCnt + 0] = 20;
                     jjnewStateCnt += 1;
                     continue;
               default : continue;
            }
         } while(i != 0);
      }
      return;
   }
}
static int[] StopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x37fc80L) != 0L)
         {
            matchedToken.kind = 26;
            return jjstates16;
         }
         if ((active0 & 0x4L) != 0L)
            return jjstates16;
         if ((active0 & 0x100L) != 0L)
         {
            matchedToken.kind = 9;
            return jjstates21;
         }
         return null;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return jjstates16;
         if ((active0 & 0x37fc80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 1;
            }
            return jjstates16;
         }
         return null;
      case 2:
         if ((active0 & 0x37fc00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 2;
            }
            return jjstates16;
         }
         if ((active0 & 0x80L) != 0L)
            return jjstates16;
         return null;
      case 3:
         if ((active0 & 0x37dc00L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 3;
            }
            return jjstates16;
         }
         if ((active0 & 0x2000L) != 0L)
            return jjstates16;
         return null;
      case 4:
         if ((active0 & 0x37dc00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 4;
            }
            return jjstates16;
         }
         return null;
      case 5:
         if ((active0 & 0x120400L) != 0L)
            return jjstates16;
         if ((active0 & 0x25d800L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 5;
            }
            return jjstates16;
         }
         return null;
      case 6:
         if ((active0 & 0x215000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 6;
            }
            return jjstates16;
         }
         if ((active0 & 0x48800L) != 0L)
            return jjstates16;
         return null;
      case 7:
         if ((active0 & 0x4000L) != 0L)
            return jjstates16;
         if ((active0 & 0x211000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 7;
            }
            return jjstates16;
         }
         return null;
      case 8:
         if ((active0 & 0x200000L) != 0L)
            return jjstates16;
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 8;
            }
            return jjstates16;
         }
         return null;
      case 9:
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               matchedToken.kind = 26;
               jjmatchedPos = 9;
            }
            return jjstates16;
         }
         if ((active0 & 0x1000L) != 0L)
            return jjstates16;
         return null;
      case 10:
         if ((active0 & 0x10000L) != 0L)
            return jjstates16;
         return null;
      default : 
         return null;
   }
}
static void jjStartNfa_0(int pos, long active0)
{
   if ((jjstartStateSet = StopStringLiteralDfa_0(pos, active0)) != null)
   {
      jjnewStateCnt = jjstartStateSet.length;
      jjMoveNfa_0(jjstartStateSet, jjstateSet2);
      if (jjcurKind != 2147483647)
      {
         matchedToken.kind = jjcurKind;
         jjmatchedPos = pos + 1;
         jjcurKind = 2147483647;
      }
   }
   return;
}
static long jjnewActive_00 = 0L, jjoldActive_00 = 0L;
static private final void jjMoveStringLiteralDfa0_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
         switch(curChar)
         {
            case 64: 
               jjoldActive_00 = 0x3fc00L;
               break;
            case 47: 
               jjoldActive_00 = 0x80L;
               break;
            case 42: 
               jjoldActive_00 = 0x100L;
               break;
            case 32: 
               matchedToken.kind = 1;
               break ReturnLoop;
            case 116: 
               jjoldActive_00 = 0x40000L;
               break;
            case 13: 
               matchedToken.kind = 4;
               jjoldActive_00 = 0x20L;
               break;
            case 10: 
               matchedToken.kind = 3;
               jjoldActive_00 = 0x40L;
               break;
            case 110: 
               jjoldActive_00 = 0x300000L;
               break;
            case 9: 
               matchedToken.kind = 2;
               jjstartStateSet = jjstates16;
               break MainLoop;
            default : 
               curPos =  1;
               if (curChar < 128)
                  if ((jjstartStateSet = jjinitStates_0[curChar]) == null)
                     return;
               else 
                  jjstartStateSet = jjallInitStates_0;
               jjnewStateCnt = jjstartStateSet.length;
               jjMoveNfa_0(jjstartStateSet, jjstateSet2);
               if (jjcurKind != 2147483647)
               {
                  matchedToken.kind = jjcurKind;
                  jjcurKind = 2147483647;
               }
               return;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(0, jjoldActive_00); 
            curPos = 1;
            throw e;
         }
         jjMoveStringLiteralDfa1_0();
         return;
    }
    curPos = 1;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 1;
       jjcurKind = 2147483647;
    }
    curPos = 2;
    return;
   }
   curPos = 1;
   return;
}
static private final void jjMoveStringLiteralDfa1_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 97: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x8000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 47: 
               if ((jjoldActive_00 & 0x100L) != 0L)
               {
                  matchedToken.kind = 8;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 42: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            case 118: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x4000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 117: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x300000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 115: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x22000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x40800L)) == 0L)
                  break StartNfaLoop;
               break;
            case 13: 
               if ((jjoldActive_00 & 0x40L) != 0L)
               {
                  matchedToken.kind = 6;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 112: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x400L)) == 0L)
                  break StartNfaLoop;
               break;
            case 10: 
               if ((jjoldActive_00 & 0x20L) != 0L)
               {
                  matchedToken.kind = 5;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 101: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(1, jjnewActive_00); 
            curPos = 2;
            throw e;
         }
         jjMoveStringLiteralDfa2_0();
         return;
      }
      jjStartNfa_0(0, jjoldActive_00); 
      curPos = 2;
      return;
    }
    jjmatchedPos = 1;
    curPos = 2;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 2;
       jjcurKind = 2147483647;
    }
    curPos = 3;
    return;
   }
   jjmatchedPos = 1;
   curPos = 2;
   return;
}
static private final void jjMoveStringLiteralDfa2_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 97: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x400L)) == 0L)
                  break StartNfaLoop;
               break;
            case 42: 
               if ((jjnewActive_00 & 0x80L) != 0L)
               {
                  matchedToken.kind = 7;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 120: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 117: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x48000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x300000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 105: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x20000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x16800L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(2, jjoldActive_00); 
            curPos = 3;
            throw e;
         }
         jjMoveStringLiteralDfa3_0();
         return;
      }
      jjStartNfa_0(1, jjnewActive_00); 
      curPos = 3;
      return;
    }
    jjmatchedPos = 2;
    curPos = 3;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 3;
       jjcurKind = 2147483647;
    }
    curPos = 4;
    return;
   }
}
static private final void jjMoveStringLiteralDfa3_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 99: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 116: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x8800L)) == 0L)
                  break StartNfaLoop;
               break;
            case 115: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x40000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x4400L)) == 0L)
                  break StartNfaLoop;
               break;
            case 112: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x20000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x300000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if ((jjoldActive_00 & 0x2000L) != 0L)
               {
                  matchedToken.kind = 13;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(3, jjnewActive_00); 
            curPos = 4;
            throw e;
         }
         jjMoveStringLiteralDfa4_0();
         return;
      }
      jjStartNfa_0(2, jjoldActive_00); 
      curPos = 4;
      return;
    }
    jjmatchedPos = 3;
    curPos = 4;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 4;
       jjcurKind = 2147483647;
    }
    curPos = 5;
    return;
   }
}
static private final void jjMoveStringLiteralDfa4_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 99: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x20000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 97: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x400L)) == 0L)
                  break StartNfaLoop;
               break;
            case 79: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x100000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 70: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x200000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 117: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x800L)) == 0L)
                  break StartNfaLoop;
               break;
            case 116: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x40000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 115: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x4000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 104: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x8000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(4, jjoldActive_00); 
            curPos = 5;
            throw e;
         }
         jjMoveStringLiteralDfa5_0();
         return;
      }
      jjStartNfa_0(3, jjnewActive_00); 
      curPos = 5;
      return;
    }
   }
}
static private final void jjMoveStringLiteralDfa5_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 97: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x200000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 75: 
               if ((jjoldActive_00 & 0x100000L) != 0L)
               {
                  matchedToken.kind = 20;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 114: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x800L)) == 0L)
                  break StartNfaLoop;
               break;
            case 112: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 111: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x8000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 109: 
               if ((jjoldActive_00 & 0x400L) != 0L)
               {
                  matchedToken.kind = 10;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 105: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x4000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if ((jjoldActive_00 & 0x20000L) != 0L)
               {
                  matchedToken.kind = 17;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               if (((jjnewActive_00 = jjoldActive_00 & 0x50000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(5, jjnewActive_00); 
            curPos = 6;
            throw e;
         }
         jjMoveStringLiteralDfa6_0();
         return;
      }
      jjStartNfa_0(4, jjoldActive_00); 
      curPos = 6;
      return;
    }
    jjmatchedPos = 5;
    curPos = 6;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 6;
       jjcurKind = 2147483647;
    }
    curPos = 7;
    return;
   }
}
static private final void jjMoveStringLiteralDfa6_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if ((jjnewActive_00 & 0x40000L) != 0L)
               {
                  matchedToken.kind = 18;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 99: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 116: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x201000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if ((jjnewActive_00 & 0x8000L) != 0L)
               {
                  matchedToken.kind = 15;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 111: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x4000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if ((jjnewActive_00 & 0x800L) != 0L)
               {
                  matchedToken.kind = 11;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(6, jjoldActive_00); 
            curPos = 7;
            throw e;
         }
         jjMoveStringLiteralDfa7_0();
         return;
      }
      jjStartNfa_0(5, jjnewActive_00); 
      curPos = 7;
      return;
    }
    jjmatchedPos = 6;
    curPos = 7;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 7;
       jjcurKind = 2147483647;
    }
    curPos = 8;
    return;
   }
}
static private final void jjMoveStringLiteralDfa7_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 97: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x210000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if ((jjoldActive_00 & 0x4000L) != 0L)
               {
                  matchedToken.kind = 14;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 105: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(7, jjnewActive_00); 
            curPos = 8;
            throw e;
         }
         jjMoveStringLiteralDfa8_0();
         return;
      }
      jjStartNfa_0(6, jjoldActive_00); 
      curPos = 8;
      return;
    }
    jjmatchedPos = 7;
    curPos = 8;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 8;
       jjcurKind = 2147483647;
    }
    curPos = 9;
    return;
   }
}
static private final void jjMoveStringLiteralDfa8_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 116: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 111: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x1000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if ((jjnewActive_00 & 0x200000L) != 0L)
               {
                  matchedToken.kind = 21;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(8, jjoldActive_00); 
            curPos = 9;
            throw e;
         }
         jjMoveStringLiteralDfa9_0();
         return;
      }
      jjStartNfa_0(7, jjnewActive_00); 
      curPos = 9;
      return;
    }
    jjmatchedPos = 8;
    curPos = 9;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 9;
       jjcurKind = 2147483647;
    }
    curPos = 10;
    return;
   }
}
static private final void jjMoveStringLiteralDfa9_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 110: 
               if ((jjoldActive_00 & 0x1000L) != 0L)
               {
                  matchedToken.kind = 12;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            case 101: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x10000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(9, jjnewActive_00); 
            curPos = 10;
            throw e;
         }
         jjMoveStringLiteralDfa10_0();
         return;
      }
      jjStartNfa_0(8, jjoldActive_00); 
      curPos = 10;
      return;
    }
    jjmatchedPos = 9;
    curPos = 10;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 10;
       jjcurKind = 2147483647;
    }
    curPos = 11;
    return;
   }
}
static private final void jjMoveStringLiteralDfa10_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if ((jjnewActive_00 & 0x10000L) != 0L)
               {
                  matchedToken.kind = 16;
                  jjstartStateSet = jjstates16;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
      }
      jjStartNfa_0(9, jjnewActive_00); 
      curPos = 11;
      return;
    }
    jjmatchedPos = 10;
    curPos = 11;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 11;
       jjcurKind = 2147483647;
    }
    curPos = 12;
    return;
   }
}
static final int[] jjstates0 = { 0, };
static final int[] jjstates1 = { 1, };
static final int[] jjstates2 = { 2, };
static final int[] jjstates3 = { 3, };
static final int[] jjstates4 = { 4, };
static final int[] jjstates5 = { 5, };
static final int[] jjstates6 = { 6, };
static final int[] jjstates7 = { 7, };
static final int[] jjstates8 = { 8, };
static final int[] jjstates9 = { 10, };
static final int[] jjstates10 = { 11, };
static final int[] jjstates11 = { 12, };
static final int[] jjstates12 = { 13, };
static final int[] jjstates13 = { 14, };
static final int[] jjstates14 = { 15, };
static final int[] jjstates15 = { 18, 19, };
static final int[] jjstates16 = { 20, };
static final int[] jjstates17 = { 23, 19, };
static final int[] jjstates18 = { 23, };
static final int[] jjstates19 = { 24, 19, };
static final int[] jjstates20 = { 22, 24, 19, };
static final int[] jjallInitStates_0 = { 0, 9, 16, 17, 20, 21, };
static final int[] jjstates21 = { 0, 20, };
static final int[] jjstates22 = { 20, 21, };
static final int[] jjstates23 = { 17, 20, };
static final int[] jjstates24 = { 16, 20, };
static final int[] jjstates25 = { 9, 20, };
static final int[][] jjinitStates_0 = {
jjallInitStates_0, jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, null, 
jjstates16, jjstates16, null, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, null, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates21, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates22, jjstates23, jjstates23, 
jjstates23, jjstates23, jjstates23, jjstates23, jjstates23, 
jjstates23, jjstates23, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates24, 
jjstates16, jjstates25, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, jjstates16, jjstates16, jjstates16, 
jjstates16, jjstates16, };

public static final String[] jjstrLiteralImages = {
null, null, null, "\12", "\15", "\15\12", "\12\15", "\57\52\52", "\52\57", 
null, "\100\160\141\162\141\155", "\100\162\145\164\165\162\156", 
"\100\145\170\143\145\160\164\151\157\156", "\100\163\145\145", "\100\166\145\162\163\151\157\156", 
"\100\141\165\164\150\157\162", "\100\144\145\160\162\145\143\141\164\145\144", "\100\163\151\156\143\145", 
"\164\162\165\163\164\145\144", null, "\156\165\154\154\117\113", "\156\165\154\154\106\141\164\141\154", null, 
null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = 
{
0x47ffff8L,
};
static final long[] jjtoSkip = 
{
0x6L,
};
static private ASCII_CharStream input_stream;
static private int[] jjrounds = new int[25];
static private int[] jjstateSet1 = new int[25];
static private int[] jjstateSet2 = new int[25];
static private int[] jjnextStates;
static int curPos;
static protected char curChar;
static int jjcurKind = 2147483647;
static CommentParserTokenManager jjme;
public CommentParserTokenManager(ASCII_CharStream stream)
{
if (input_stream != null)
{
   System.err.println("ERROR: Second call to constructor of static lexer.  You must");
   System.err.println("       either use ReInit() or set the JavaCC option STATIC to false");
   System.err.println("       during lexer generation.");
   throw new Error();
}
input_stream = stream;
jjme = this;
}
public CommentParserTokenManager(ASCII_CharStream stream, int lexState)
{
if (input_stream != null)
{
   System.err.println("ERROR: Second call to constructor of static lexer.  You must");
   System.err.println("       either use ReInit() or set the JavaCC option STATIC to false");
   System.err.println("       during lexer generation.");
   throw new Error();
}
input_stream = stream;
jjme = this;
   if (lexState >= 1 || lexState < 0)
   {
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". Starting lexer in DEFAULT state.");
      curLexState = defaultLexState;
   }
   else
      curLexState = lexState;
}
static public void ReInit(ASCII_CharStream stream)
{
int i;
jjcurKind = 2147483647;
curPos = jjmatchedPos = jjnewStateCnt = jjround = 0;
jjstartStateSet = null;
curChar = (char)0;
jjEOFSeen = false;
curLexState = defaultLexState;
input_stream = stream;
for (i = 25; i-- > 0;)
   jjrounds[i] = 0;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
int i;
jjcurKind = 2147483647;
curPos = jjmatchedPos = jjnewStateCnt = jjround = 0;
jjstartStateSet = null;
curChar = (char)0;
jjEOFSeen = false;
   if (lexState >= 1 || lexState < 0)
   {
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". Reinitialzing lexer in DEFAULT state.");
      curLexState = defaultLexState;
   }
   else
      curLexState = lexState;
input_stream = stream;
for (i = 25; i-- > 0;)
   jjrounds[i] = 0;
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.");
   else
      curLexState = lexState;
}


static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static private boolean jjEOFSeen = false;
static int[] jjtmpStates = jjstateSet1;
static int jjmatchedPos;
static Token matchedToken;
static Token jjspecialToken;
static private int[] jjstartStateSet;

static public Token getNextToken() throws ParseError
{
  matchedToken = new Token();

  EOFLoop : for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      matchedToken.endLine = matchedToken.beginLine = input_stream.getBeginLine();
      matchedToken.endColumn = matchedToken.beginColumn = input_stream.getBeginColumn();
      matchedToken.kind = 0;
      matchedToken.image = "";
      return matchedToken;
   }

   try
   {
    for (;;)
    {
      matchedToken.kind = 2147483647;
      jjmatchedPos = 0;
      jjMoveStringLiteralDfa0_0();
      while (jjnewStateCnt != 0)
      {
         curChar = input_stream.readChar();
         jjMoveNfa_0(jjstateSet1 = jjstateSet2, jjstateSet2 = jjtmpStates);
         jjtmpStates = jjstateSet1;
         if (jjcurKind != 2147483647)
         {
            matchedToken.kind = jjcurKind;
            jjcurKind = 2147483647;
            jjmatchedPos = curPos++;
         }
         else
            curPos++;
      }

      if (matchedToken.kind != 2147483647)
      {
         if (jjmatchedPos + 1 < curPos)
            input_stream.backup(curPos - jjmatchedPos - 1);

         if ((jjtoToken[matchedToken.kind >> 6] &
             (1L << (matchedToken.kind & 077))) != 0L)
         {
            if ((matchedToken.image = jjstrLiteralImages[matchedToken.kind]) == null)
               matchedToken.image = input_stream.GetImage();
            matchedToken.beginLine = input_stream.getBeginLine();
            matchedToken.beginColumn = input_stream.getBeginColumn();
            matchedToken.endLine = input_stream.getEndLine();
            matchedToken.endColumn = input_stream.getEndColumn();
            return matchedToken;
         }
         else
         {
            continue EOFLoop;
         }
      }
      else
      {
         jjme.error_line = input_stream.getEndLine();
         jjme.error_column = input_stream.getEndColumn();
         input_stream.backup(1);
         jjme.error_after = curPos <= 1 ? "" : jjadd_escapes(input_stream.GetImage());
         jjme.LexicalError();

         throw new ParseError();
      }
    }
   }
   catch (java.io.IOException e)
   {
      switch(curLexState)
      {
         default : break;
      }
      if (matchedToken.kind != 2147483647 && matchedToken.kind != 0)
      {
         if (jjmatchedPos + 1 < curPos)
            input_stream.backup(curPos - jjmatchedPos - 1);

         if ((jjtoToken[matchedToken.kind >> 6] &
             (1L << (matchedToken.kind & 077))) != 0L)
         {
            if ((matchedToken.image = jjstrLiteralImages[matchedToken.kind]) == null)
               matchedToken.image = input_stream.GetImage();
            matchedToken.beginLine = input_stream.getBeginLine();
            matchedToken.beginColumn = input_stream.getBeginColumn();
            matchedToken.endLine = input_stream.getEndLine();
            matchedToken.endColumn = input_stream.getEndColumn();
            return matchedToken;
         }
         else
         {
            continue EOFLoop;
         }
      }

      jjme.error_line = input_stream.getEndLine();
      jjme.error_column = input_stream.getEndColumn();
      input_stream.backup(1);
      jjEOFSeen = true;
      jjme.error_after = curPos <= 1 ? "" : jjadd_escapes(input_stream.GetImage());
      jjme.LexicalError();

      throw new ParseError();
   }
  }
}

protected int error_line, error_column;
protected String error_after;
protected void LexicalError()
{
   System.err.println("Lexical error at line " +
        error_line + ", column " +
        error_column + ".  Encountered: " +
        (jjEOFSeen ? "<EOF>" : ("\"" + jjadd_escapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
        "after : \"" + jjme.error_after + "\"");
}
}
