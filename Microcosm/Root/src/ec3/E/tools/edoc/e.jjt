/* 
 *  Copyright 1997 Electric Communities. All rights reserved worldwide.
 * 
 *  Rob Kinninmont, April 97.
 *
 *  This file is an extensien of the java1.0.2 grammar distributed with 
 *  JavaCC, to handle E syntax, and with assorted extensions to extract 
 *  useful information for documentation and stub files.
 */

/**
 *
 * Copyright (C) 1996 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 6/11/96
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */



options {
  JAVA_UNICODE_ESCAPE = true;
  MULTI=true;
}

PARSER_BEGIN(EDocParser)

package ec.edoc;

public class EDocParser {
}

PARSER_END(EDocParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

TOKEN : /* ( Especific RESERVED WORDS AND LITERALS */
{
  < ECATCH: "ecatch" >
| < ECLASS: "eclass" >
| < EFALSE: "efalse" >
| < EFORALL: "eforall" >
| < EIF: "eif" >
| < EINTERFACE: "einterface" >
| < EMETHOD: "emethod" >
| < EORIF: "eorif" >
| < EORWHEN: "eorwhen" >
| < ETHROW: "ethrow" >
| < ETRUE: "etrue" >
| < ETRY: "etry" >
| < EWHEN: "ewhen" >
| < EWHENEVER: "ewhenever" >
| < FORWARD: "forward" > 
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

TOKEN : /* Especific Operator(s) */
{
  < SEND: "<-" >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit() :
{}
{
    // This line makes a note of the first token so that we can get
    // all of the tokens (including comments) back out :)
    { jjtThis.setFirstToken(getToken(1)); }
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>
  { return jjtThis; }
}

void PackageDeclaration() :
{}
{
  // Do we really need to comment packages / imports ?
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  "package" Name() ";"
}

void ImportDeclaration() :
{}
{
  // Do we really need to comment packages / imports ?
  // Answer - no. But it makes it very difficult to get the information they
  // hold out of them once you've ignored them... so we do.
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
   //  Make a note of the current token
  }
  "import" Name() [ "." "*" ] ";"
}

void TypeDeclaration() #void :
{}
{
  LOOKAHEAD( ( Modifier() )* "class" )
  ClassDeclaration()
|
  LOOKAHEAD( ( Modifier() )* "eclass" )
  E_ClassDeclaration() // Especific
|
  LOOKAHEAD( ( Modifier() )* "interface" )
  InterfaceDeclaration()
|
  LOOKAHEAD( ( Modifier() )* "einterface" )
  E_InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  ( Modifier() )*
  "class" Identifier() [ Extends() ] [ Implements() ]
  "{" ( ClassBodyDeclaration() )* "}"
}

void Extends() :
{}
{
  "extends" NameList()
}

void Implements() :
{}
{
  "implements" NameList()
}


void E_ClassDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  ( Modifier() )*
  "eclass" Identifier() [ Extends() ] [ Implements() ]
  "{" ( E_ClassBodyDeclaration() )* "}" 
}

void ClassBodyDeclaration() #void :
{}
{
  LOOKAHEAD(2)
  StaticInitializer()
|
  LOOKAHEAD( [ Modifier() ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void E_ClassBodyDeclaration() #void :
{}
{
  LOOKAHEAD(2)
  StaticInitializer()  // Womble!
|
  LOOKAHEAD( [ Modifier() ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  LOOKAHEAD( "emethod" Name() "(" )
  E_MethodDeclaration()
//|
//  LOOKAHEAD( "eforall" "(" )  // NB Grammar does not enforce mutual exlusion
//  E_ForAllDeclaration()       // of emethods & eforall
|
//  E_FieldDeclaration()
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( Modifier() )*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  ( Modifier() )*
  "interface" Identifier() [ Extends() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void E_InterfaceDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  "einterface" Identifier() [ Extends() ]
  "{" ( E_MessageDeclaration() )* "}"
}

void E_MessageDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  Identifier() "(" [ E_TypeDeclarationParameter() 
    ( "," E_TypeDeclarationParameter() )* ] ")" ";"
}

/* This is needed because E allows you to say methodname(int, int) in an
 * einterface. cf java which only allows method(int foo, int bar)
 */
void E_TypeDeclarationParameter() :
{}
{
  LOOKAHEAD( FormalParameter() )
  FormalParameter()
|
  Type()
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  ( Modifier() )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  Identifier() ( ArrayBrackets() )*
}

// ArrayBrackets is used to place information about brackets[] in type decls
void ArrayBrackets() :
{}
{
  "[" "]"
}

void VariableInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
|
  Expression()
}

void Throws() :
{}
{
  "throws" NameList()
}

void MethodDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  ( Modifier() )*
  ResultType() MethodDeclarator() [ Throws() ]
  ( Block() | ";" )
}

void E_MethodDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  "emethod"	MethodDeclarator()
  ( Block() | ";" )
}

//void E_ForAllDeclaration() :
//{}
//{
//  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
//    // Make a note of the current token
//  }
//  "eforall" "(" FormalParameter() ")"
//  ( Block() | ";" )
//}

void MethodDeclarator() #void :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  Identifier() FormalParameters() ( ArrayBrackets() )*
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  Type() VariableDeclaratorId()
}

void ConstructorDeclaration() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  [ Modifier() ]
  Identifier() FormalParameters() [ Throws() ]
  "{" [ LOOKAHEAD(2) ExplicitConstructorInvocation() ] ( BlockStatement() )* "}"
}

void ExplicitConstructorInvocation() :
{}
{
  "this" Arguments() ";"
|
  "super" Arguments() ";"
}

void StaticInitializer() :
{}
{
  { ((SimpleNode)jjtree.currentNode()).setToken(getToken(1)); 
    // Make a note of the current token
  }
  "static" Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
  ( PrimitiveType() | Name() ) ( ArrayBrackets() )*
}

/*
 * Modelled after the Adjusted Primative Type, this production
 * gets modifiers into the parse tree, at the expense of widening the
 * syntax of the input grammar - this means a semantic check _ought_ 
 * to bo done
 */
void Modifier() :
{
  Token t;
}
{
( 
  t=<PUBLIC>
|
  t=<PROTECTED>
|
  t=<PRIVATE>
|
  t=<STATIC>
|
  t=<ABSTRACT>
|
  t=<FINAL>
|
  t=<NATIVE>
|
  t=<SYNCHRONIZED>
| 
  t=<VOLATILE>
| 
  t=<TRANSIENT>
)
  { ((SimpleNode)(jjtree.currentNode())).setInfo(t); }
}

void PrimitiveType() :
{
  Token t;
}
{
(
  t=<BOOLEAN>
|
  t=<CHAR>
|
  t=<BYTE>
|
  t=<SHORT>
|
  t=<INT>
|
  t=<LONG>
|
  t=<FLOAT>
|
  t=<DOUBLE>
|
  t=<EFALSE>  // Especific 
|
  t=<ETRUE>  // Especific 
)
  { ((SimpleNode)(jjtree.currentNode())).setInfo(t); }
}

void ResultType() :
{
  Token t = null;
}
{
(
  t=<VOID> 
|
  Type() 
)
  { 
    ((SimpleNode)(jjtree.currentNode())).setInfo(t); 
    // ResultType::getInfo() returns null if _not_ void
  }
}

void Identifier() :  // Especific 
/* 
 * Place Identifier nodes into parse tree - added to java grammar.
 */
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
    //System.out.println("  Identifier: " + t.image);
  }
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  Identifier()
  ( LOOKAHEAD(2) "." Identifier()
  )*
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
{}
{
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
|
  ConditionalExpression()
}

void Assignment() :
{}
{
  PrimaryExpression() AssignmentOperator() Expression()
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression() #void :
{}
{ 
  ( 
    ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
  ) #ConditionalExpr(>1)
}

void ConditionalOrExpression() #void :
{}
{
  (
    ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
  ) #ConditionalOrExpr(>1)
}

void ConditionalAndExpression() #void :
{}
{
  (
    InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
  ) #ConditionalAndExpr(>1)
}

void InclusiveOrExpression() #void :
{}
{
  (
    ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
  ) #BitwiseInclusiveOrExpr(>1)
}

void ExclusiveOrExpression() #void :
{}
{
  (
    AndExpression() ( "^" AndExpression() )*
  ) #BitwiseExclusiveOrExpr(>1)
}

void AndExpression() #void :
{}
{
  (
    EqualityExpression() ( "&" EqualityExpression() )*
  ) #BitwiseAndExpr(>1)
}

void EqualityExpression() #void :
{}
{
  (
    InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
  ) #EqualityExpr(>1)
}

void InstanceOfExpression() #void :
{}
{
  (
    RelationalExpression() [ "instanceof" Type() ]
  ) #InstanceOfExpr(>1)
}

void RelationalExpression() #void :
{}
{
  (
    ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
  ) #RelationalExpr(>1)
}

void ShiftExpression() #void :
{}
{
  (
    AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
  ) #ShiftExpr(>1)
}

void AdditiveExpression() #void :
{}
{
  (
    MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
  ) #AdditiveExpr(>1)
}

void MultiplicativeExpression() #void :
{}
{
  (
    UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
  ) #MulitplicativeExpr(>1)
}

void UnaryExpression() #void :
{}
{
  ( "+" | "-" ) UnaryExpression()  
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() #void :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() #void :
{}
{
  (
    PrimaryExpression() [ "++" | "--" ]
  ) #PostfixExpr(>1)
}

void CastExpression() #void :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType() ( "[" "]" )* ")" UnaryExpression()
|
  "(" Name() ( "[" "]" )* ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() #void :
{}
{
  PrimaryPrefix() ( PrimarySuffix() )*
}

void PrimaryPrefix() #void :
{}
{
  Literal()
|
  Name()
|
  "this"
|
  "super" "." Identifier()
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD (E_DistributionExpression())
  E_DistributionExpression() // Especific
}

void E_DistributionExpression() :
{}
{ 
  "&" Name()
}

void PrimarySuffix() :
{}
{
  "[" Expression() "]"
|
  "." Identifier()
|
  Arguments()
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimensions()
|
  "new" Name() ( Arguments() | ArrayDimensions() )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimensions() :
{}
{
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
}


/*
 * Statement syntax follows.
 */

void Statement() #void : /* Especific additions */ 
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  //LOOKAHEAD( E_SendStatement() )//Expression() "<-" ( Name() Arguments() | "forward" Arguments()) )
  LOOKAHEAD( Expression() "<-" )
  E_SendStatement() ";"
|
  LOOKAHEAD ( StatementExpression() )
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
| 
  E_IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  E_ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
|
  E_TryStatement()
|
  E_WhenStatement()
|
  E_WhenEverStatement()
}

void LabeledStatement() :
{}
{
  Identifier() ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD(Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()
}

void LocalVariableDeclaration() :
{}
{
  Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
|
  PostfixExpression()
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void E_IfStatement() :
{}
{
  "eif" "(" Expression() ")" Statement() 
    [ LOOKAHEAD(1) "eorif" "(" Expression() ")" Statement() ]
    [ LOOKAHEAD(1) "else" Statement() ]
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ Identifier() ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ Identifier() ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void E_ThrowStatement() :
{}
{
  "ethrow" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

void E_TryStatement() :
{}
{
  "etry" Block() 
  ( "ecatch" "(" FormalParameter() ")" Block() )+
}

void E_WhenStatement() :
{}
{
  "ewhen" Identifier() "(" FormalParameter() ")" Block()
  ( "eorwhen" Identifier() "(" FormalParameter() ")" Block() )*
}

void E_WhenEverStatement() :
{}
{
  "ewhenever" Identifier() "(" FormalParameter() ")" Block()
}

void E_SendStatement() :
{}
{
  (
    LOOKAHEAD(  Expression() "<-" "forward"  )
    Expression() "<-" "forward" Arguments()    
  |
    LOOKAHEAD( Expression() "<-" <IDENTIFIER> )
    Expression() "<-" Identifier() [ Arguments() ] 
  )
}