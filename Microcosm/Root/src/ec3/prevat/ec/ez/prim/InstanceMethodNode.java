package ec.ez.prim;

import ec.ez.runtime.MethodNode;
import ec.ez.runtime.Ejection;
import ec.ez.runtime.AlreadyDefinedException;
import ec.ez.collect.NameTableEditor;
import java.io.PrintStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class InstanceMethodNode extends JavaMemberNode {

    public InstanceMethodNode(Method method) {
        super(method);
        if (Modifier.isStatic(method.getModifiers())) {
            throw new Error("internal: not an instance method");
        }
    }

    public Class[] parameterTypes() {
        return ((Method)member()).getParameterTypes();
    }

    protected Object innerExecute(Object rec, Object[] args)
         throws Exception {

        Method meth = (Method)member();
        Object coercedRec = coerce(rec, meth.getDeclaringClass());
        return meth.invoke(coercedRec, coerceArgs(args));
    }

    protected String explain(String args) {
        return "<a " + member().getDeclaringClass().getName() + ">."
                + verb() + "(" + args + ")";
    }

    static public void defineMembers(NameTableEditor vTable, Class clazz)
         throws AlreadyDefinedException {
       Method[] meths = clazz.getMethods();
       for (int i = 0; i < meths.length; i++) {
            if (! Modifier.isStatic(meths[i].getModifiers())) {
                MethodNode meth = new InstanceMethodNode(meths[i]);
                try {
                    vTable.introduce(meth.mangle(), meth);
                } catch (AlreadyDefinedException ex) {
                    // JAY - swallow exceptions generated by
                    // duplicate definitions.
                }
            }
        }
    }
}

