package ec.ez.prim;

import ec.ez.runtime.MethodNode;
import ec.ez.runtime.Ejection;
import ec.ez.runtime.AlreadyDefinedException;
import ec.ez.collect.NameTableEditor;
import java.io.PrintStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;


public class SugarMethodNode extends JavaMemberNode {
    public boolean printOKflag = false;

    public SugarMethodNode(Method method) {
        super(method);
        if (! Modifier.isStatic(method.getModifiers())) {
            throw new Error("internal: not a static method");
        }
    }

    // If the printOKflag is not set, then suppress printing of this 
    // method node.
    public void printOn(PrintStream os, int indent) throws IOException {
        if(printOKflag) {
            super.printOn(os, indent);
        }
    }

    public void lnPrintOn(PrintStream os, int indent) throws IOException {
        if(printOKflag) {
            super.lnPrintOn(os, indent);
        }
    }

    public Class[] parameterTypes() {
        Class[] types = ((Method)member()).getParameterTypes();
        Class[] result = new Class[types.length -1];
        System.arraycopy(types, 1, result, 0, result.length);
        return result;
    }

    protected Object innerExecute(Object rec, Object[] args) throws Exception {
        Method meth = (Method)member();
        Object[] newArgs = new Object[args.length +1];
        newArgs[0] = coerce(rec, meth.getParameterTypes()[0]);
        System.arraycopy(coerceArgs(args), 0, newArgs, 1, args.length);
        return meth.invoke(null, newArgs);
    }

    protected String explain(String args) {
        if (args.length() != 0) {
            args = ", " + args;
        }
        return member().getDeclaringClass().getName() + "."
                + verb() + "(<receiver>" + args + ")";
    }

    static public void defineMembers(NameTableEditor vTable, Class clazz)
         throws AlreadyDefinedException {
        Method[] meths = clazz.getMethods();
        for (int i = 0; i < meths.length; i++) {
            if (Modifier.isStatic(meths[i].getModifiers())) {
                MethodNode meth = new SugarMethodNode(meths[i]);
                try {
                    vTable.introduce(meth.mangle(), meth);
                } catch (AlreadyDefinedException ex) {
                    // JAY - swallow exceptions generated by duplicate
                    // definitions.
                }
            }
        }
    }
}

