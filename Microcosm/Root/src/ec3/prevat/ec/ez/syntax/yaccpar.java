//### This file created by BYACC 1.8(/Java extension  0.1)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Please send bug reports to rjamison@lincom-asg.com
//### static char yysccsid[] = "@(#)yaccpar 1.8 (Berkeley) 01/20/90";



//#line 14 "ez.y"
package ec.ez.syntax;

import ec.ez.runtime.AlreadyDefinedException;
import ec.ez.runtime.MethodNode;
import ec.ez.collect.*;
import ec.ez.prim.EZStaticWrapper;
import ec.ez.ezvm.*;
import java.lang.reflect.Array;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Vector;
import java.util.Hashtable;
import java.util.Enumeration;
import java.math.BigInteger;
//#line 22 "yaccpar.java"




//#####################################################################
// class: yaccpar
// does : encapsulates yacc() parser functionality in a Java
//        class for quick code development
//#####################################################################
public class yaccpar
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character
String yytext;          //string buffer for use by yylex()

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[],stateptr;             //state stack
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
void state_push(int state)
{
  if (stateptr>=YYSTACKSIZE)         //overflowed?
    return;
  statestk[++stateptr]=state;
}
int state_pop()
{
  if (stateptr<0)                    //underflowed?
    return -1;
  return statestk[stateptr--];
}
void state_drop(int cnt)
{
int ptr;
  ptr=stateptr-cnt;
  if (ptr<0)
    return;
  stateptr = ptr;
}
int state_peek(int relative)
{
int ptr;
  ptr=stateptr-relative;
  if (ptr<0)
    return -1;
  return statestk[ptr];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
boolean init_stacks()
{
  statestk = new int[YYSTACKSIZE];
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}
//########## SEMANTIC VALUES ########## type:double
double yyval;           //used to return semantic vals from action routines
double yylval;          //the 'lval' (result) I got from yylex()
double valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.  semantic type=double
//###############################################################
void val_init()
{
  valstk=new double[YYSTACKSIZE];
  valptr=-1;
}
void val_push(double val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
double val_pop()
{
  if (valptr<0)
    return -1;
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
double val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return -1;
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short Identifier=257;
public final static short Literal=258;
public final static short QuasiString=259;
public final static short BlockMacro=260;
public final static short DispatchMacro=261;
public final static short CATCH=262;
public final static short DEFINE=263;
public final static short DISPATCH=264;
public final static short ELSE=265;
public final static short ENTER_POV=266;
public final static short ESCAPE=267;
public final static short FINALLY=268;
public final static short FOR=269;
public final static short IF=270;
public final static short IN=271;
public final static short LET=272;
public final static short LOOP=273;
public final static short MATCH=274;
public final static short OBJECT=275;
public final static short POV=276;
public final static short SWITCH=277;
public final static short THROW=278;
public final static short TO=279;
public final static short TRY=280;
public final static short WHILE=281;
public final static short ABSTRACT=282;
public final static short AN=283;
public final static short AS=284;
public final static short BEHALF=285;
public final static short BELIEF=286;
public final static short BELIEVE=287;
public final static short BELIEVES=288;
public final static short BIND=289;
public final static short CASE=290;
public final static short CLASS=291;
public final static short CONST=292;
public final static short DEFAULT=293;
public final static short DEFMACRO=294;
public final static short DELEGATE=295;
public final static short DEPRECATED=296;
public final static short DO=297;
public final static short ENCAPSULATE=298;
public final static short ENCAPSULATED=299;
public final static short ENCAPSULATES=300;
public final static short ENSURE=301;
public final static short ENUM=302;
public final static short EVENTUAL=303;
public final static short EVENTUALLY=304;
public final static short EXISTS=305;
public final static short EXPORT=306;
public final static short EXTENDS=307;
public final static short FINAL=308;
public final static short FORALL=309;
public final static short GIVEN=310;
public final static short HIDDEN=311;
public final static short HIDE=312;
public final static short HIDES=313;
public final static short IMPLEMENTS=314;
public final static short IMPORT=315;
public final static short INTERFACE=316;
public final static short IS=317;
public final static short ISA=318;
public final static short KNOW=319;
public final static short KNOWS=320;
public final static short METHODS=321;
public final static short NATIVE=322;
public final static short ON=323;
public final static short PACKAGE=324;
public final static short PRIVATE=325;
public final static short PROTECTED=326;
public final static short PUBLIC=327;
public final static short REQUIRE=328;
public final static short SAKE=329;
public final static short STATIC=330;
public final static short STRUCT=331;
public final static short SUCHTHAT=332;
public final static short SYNCHRONIZED=333;
public final static short THIS=334;
public final static short THROWS=335;
public final static short TRANSIENT=336;
public final static short TYPEDEF=337;
public final static short VIRTUAL=338;
public final static short VOID=339;
public final static short VOLATILE=340;
public final static short EOL=341;
public final static short OpFlrDiv=342;
public final static short OpEq=343;
public final static short OpGeq=344;
public final static short OpLAnd=345;
public final static short OpLOr=346;
public final static short OpLeq=347;
public final static short OpThru=348;
public final static short OpTill=349;
public final static short OpAsl=350;
public final static short OpAsr=351;
public final static short OpMod=352;
public final static short OpNeq=353;
public final static short OpPow=354;
public final static short OpAss=355;
public final static short OpAssAdd=356;
public final static short OpAssAnd=357;
public final static short OpAssAprxDiv=358;
public final static short OpAssFlrDiv=359;
public final static short OpAssAsl=360;
public final static short OpAssAsr=361;
public final static short OpAssRemdr=362;
public final static short OpAssMod=363;
public final static short OpAssMul=364;
public final static short OpAssOr=365;
public final static short OpAssPow=366;
public final static short OpAssSub=367;
public final static short OpAssXor=368;
public final static short Send=369;
public final static short MapsTo=370;
public final static short MatchBind=371;
public final static short MisMatch=372;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    2,    3,    3,    4,    4,    4,    6,    6,
    6,    6,    6,    7,    7,   10,   10,   11,   11,   11,
   11,   11,   11,   11,   11,   12,   12,   12,   12,   12,
   13,   13,   13,   14,   14,   14,   15,   15,   15,   16,
   16,   16,   16,   16,   16,   17,   17,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   19,   19,   19,   19,   24,   24,   24,   24,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   26,   26,   29,   29,   31,   32,   27,   33,   33,   33,
   34,   34,   34,   38,   38,   43,   43,   43,   44,   44,
    1,    1,    5,    5,   45,    9,    9,   46,   46,   46,
   46,   46,   46,   46,   47,   47,   48,   48,   21,   21,
   49,   49,   28,   28,   50,   50,   51,   51,   36,   36,
   20,   39,   39,   40,   40,   37,   37,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,   22,
   22,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   23,   23,   23,   23,   23,   23,
   23,   23,   54,   54,   55,   55,   56,   56,   30,   57,
   57,   58,   58,   35,   42,   42,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,
};
final static short yylen[] = {                            2,
    1,    1,    3,    1,    3,    1,    2,    3,    1,    3,
    3,    3,    4,    1,    3,    1,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    3,    1,    3,    1,    5,    2,
    6,    3,    5,    5,    5,    5,    6,    6,    6,    9,
    1,    2,    2,    2,    1,    4,    4,    2,    1,    1,
    1,    1,    1,    3,    3,    2,    2,    3,    2,    3,
    2,    1,    1,    1,    1,    2,    3,    3,    6,    1,
    1,    1,    3,    2,    3,    3,    3,    3,    5,    5,
    6,    5,    3,    4,    4,    0,    1,    1,    0,    1,
    0,    1,    1,    2,    0,    1,    3,    1,    1,    2,
    3,    5,    1,    2,    1,    1,    1,    3,    1,    1,
    1,    3,    1,    1,    1,    3,    1,    3,    1,    3,
    1,    1,    1,    3,    3,    0,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    3,    0,    2,    5,    1,
    1,    2,    3,    4,    0,    2,    0,    1,    4,    3,
    1,    1,    2,    2,    3,    2,    4,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
  113,    0,    0,    2,    0,  142,   70,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,    0,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,    0,    0,    0,    0,  160,
  161,    0,    4,    0,    0,    0,   16,    0,    0,    0,
    0,    0,   40,    0,   48,    0,    0,   65,   69,   72,
   82,   83,   84,   85,   90,    0,    0,  143,  114,  123,
    0,    0,  119,  108,    0,  107,    0,    0,    0,    0,
    0,    0,   81,    0,    0,    0,    0,    0,    0,   76,
    0,   77,    0,   86,    0,   79,  167,  168,  169,  170,
  171,  173,    0,  163,  164,  165,  162,    0,  174,  166,
  172,    0,    0,    0,  201,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  133,    0,  135,    3,
    0,    0,    0,    0,  148,  149,  150,  151,  152,    0,
  153,  154,  155,  156,  157,  158,  159,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,    0,    0,    0,    0,
  120,  127,  125,    0,    0,  124,    0,    0,    0,    0,
    0,   80,   75,    0,    0,    0,   94,    0,   78,   96,
    0,   87,    0,  204,    0,    0,    0,   95,  203,    0,
    0,  103,   88,   97,    0,   74,    0,    5,    8,    0,
   10,   12,   11,   17,   19,   20,   24,   25,   21,   22,
   23,   29,   27,   28,   30,    0,    0,    0,    0,    0,
    0,   43,   45,   41,   42,   44,    0,  177,  179,  180,
  182,  181,    0,  178,  176,    0,    0,    0,    0,    0,
    0,  175,    0,  131,    0,  129,    0,    0,  144,  145,
    0,    0,  110,  104,  117,  105,   13,    0,  183,    0,
    0,  140,    0,    0,   93,    0,    0,  200,  205,    0,
    0,    0,  196,  138,  136,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,   67,    0,  128,  185,
    0,    0,    0,  147,    0,  100,   99,    0,  190,    0,
    0,  207,  199,    0,  102,    0,    0,   56,    0,   54,
   53,    0,   55,    0,   49,  132,  122,  188,  189,  186,
   89,  192,  194,    0,  101,    0,   59,   58,   51,   57,
  193,    0,    0,   60,
};
final static short yydgoto[] = {                          2,
  173,  314,   92,   93,    5,   94,   95,  198,  232,   96,
   97,   98,   99,  100,  101,  102,  103,  104,  105,  224,
  315,  106,  311,  107,  108,  109,  110,  176,  140,  133,
  111,  112,  113,  114,  252,  137,  365,  115,  116,  117,
  167,  262,  128,  324,  316,  129,  234,  235,  317,  178,
  179,  118,  168,  330,  331,  362,  370,  371,
};
final static short yysindex[] = {                      -299,
    0,    0, 5110,    0, -291,    0,    0,    0, 5803, 5803,
 5982,  -66,   24, 5982, 5982,   24,  -54, 6140, 5982,  -66,
    0,   24,   24, 4320,  -54,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5890, 5890, -299, -299,    0,
    0, -299,    0,   26, -210, -257,    0,  -31,  -51, -249,
   -2,  -29,    0, 5700,    0, 5890,  -26,    0,    0,    0,
    0,    0,    0,    0,    0,   61,   64,    0,    0,    0,
 5890, 5982,    0,    0, -139,    0,   61,  -54,   63,  -66,
 -232, -299,    0,  -54,  -54, -243, -128,  -54, -106,    0,
  -54,    0,  -54,    0,   15,    0,    0,    0,    0,    0,
    0,    0, 5982,    0,    0,    0,    0, 5982,    0,    0,
    0, 5982, 5982,   99,    0,    0,  -54, 5982, -184,  -54,
  -26,  -26, 5110,  103, -209,   75,    0,  126,    0,    0,
 4633, 5110, 5502, 5110,    0,    0,    0,    0,    0, 5110,
    0,    0,    0,    0,    0,    0,    0, 5110, 5502, 5502,
 5502, 5982, 5982, 5502, 5502, 5502, 5502, 5502, 5502, 5502,
 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502, 5502,
 5502, 5502, 4222,  131,  -26,    0, -299, -299, 6312, 6312,
    0,    0,    0,   79,  139,    0, -200, 5890, -200, 5110,
  -94,    0,    0, 5982,   24,  -79,    0,   62,    0,    0,
 -299,    0, -164,    0,  148,   98, 5982,    0,    0, 6140,
  -54,    0,    0,    0, -299,    0, -299,    0,    0, -257,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -259, -259,   -2,   -2,  -29,
  -29,    0,    0,    0,    0,    0, 6224,    0,    0,    0,
    0,    0,  -34,    0,    0,  152, -299, -299,  153,  154,
  155,    0, -299,    0,  156,    0,  157,  105,    0,    0,
  159, 5982,    0,    0,    0,    0,    0, -299,    0,  -78,
  -94,    0, 6312,  -91,    0,  -78, 5982,    0,    0,  158,
  -54,  -68,    0,    0,    0,  163, -299,  -41,  164,  111,
 -299,  165, -299,  166,    0, -299,    0, 5982,    0,    0,
 -299,   83, -299,    0,  -54,    0,    0, -299,    0,   84,
  -78,    0,    0,  -68,    0, -299,  169,    0,  170,    0,
    0,  171,    0,  176,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -299,    0,  174,    0,    0,    0,    0,
    0, -299,  178,    0,
};
final static short yyrindex[] = {                      3834,
    0,    0,  221,    0, 3740,    0,    0,    0,  100,  100,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5418, 4718,    0,
    0,   10,    0,    4,    3, 3302,    0,  276, 3158, 3053,
 2644, 1746,    0,  768,    0,    0, 1221,    0,    0,    0,
    0,    0,    0,    0,    0,  122,  243,    0,    0,    0,
    0,  129,    0,    0,    0,    0, 3203,    0, 3264,    0,
    0, -101,    0,    0,    0,  -46,    0,    0, 5418,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,    0,    0,
    0,  185,    0,  107,    0,    0,    0,    0,  616,    0,
 1594, 1710,    0,    0,   -7,    0,    0,  135,    0,    0,
   12,    5,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2083, 2199,    0, 5026, 5418,    0,    0,
    0,    0,    0,    0,   -6,    0,  732,    0,  732,    0,
  -99,    0,    0,    0,    0, 1105,    0,    0,    0,    0,
  -98,    0,  108,    0,    0,    0,  185,    0,    0,    0,
    0,    0,    0,    0, 5418,    0, 5418,    0,    0, 3333,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3089, 3125, 2680, 2716, 2235,
 2608,    0,    0,    0,    0,    0, 1257,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5026, 5418, 2572,    0,
    0,    0, 5026,    0,    0,    0,  191,    0,    0,    0,
 3231,    0,    0,    0,    0,    0,    0, -101,    0,  109,
  -97,    0,  113,    0,    0,  112,    0,    0,    0,    0,
    0,  616,    0,    0,    0,    0, 5418, 5418,    0,    0,
 5026,    0, 5418,    0,    0, 5418,    0,    0,    0,    0,
  114,    0, -101,    0,    0,    0,    0,  -98,    0,    0,
  115,    0,    0,  616,    0, 5418,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -98,    0,    0,    0,    0,    0,    0,
    0, 5418,    0,    0,
};
final static short yygindex[] = {                         0,
    2,    1,    0,  -65,  146, -132,    0,    0, 4166,   58,
   43, -129,  -95,  -93,  -88,  -83, -138,   22,    0,   -9,
 -240,   -3,    0,  -47,  -96, 3593,    7,    0, 3631,   11,
 -207, -262,  -86,    0,    0,    0,    0, -133, 3626,    0,
    0, -304,  239,   16,  -67, -108, -126,    0,    0,    0,
  -16,    0,   31,    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=6652;
final static short yytable[] = {                        378,
    4,    3,    9,    6,    7,  347,  204,  221,  210,  111,
  209,  112,  219,  227,  164,  126,  126,  220,  247,  134,
  165,  177,  138,  111,  231,  115,  111,  184,  145,  146,
  144,  139,  170,  328,  126,  255,  137,  375,  171,  172,
  215,    1,  216,    9,    6,    7,    9,    6,    7,  119,
  111,  271,  112,  111,  233,  112,  132,  272,  225,    9,
   10,    9,  206,   88,  228,  273,  349,  361,  139,  395,
  275,  276,  354,  368,  279,  280,  281,  260,  292,  293,
  294,  295,  296,  261,  182,  137,  126,  199,  174,  175,
  213,  214,  205,  180,  233,    9,    6,    7,  211,  212,
  213,  214,  111,  323,  112,  323,  229,  327,  394,  230,
  382,  282,  283,  284,  285,  268,  269,  286,  287,  236,
  238,   91,  240,  363,  288,  289,  244,    9,    6,    7,
  340,  290,  291,  241,  111,  183,  112,  251,  257,  248,
  239,  325,  245,  264,  184,  185,  186,  187,  188,  189,
  190,  191,  192,  193,  194,  195,  196,  197,   91,   91,
  265,   91,   91,   91,   91,   91,   91,  266,   91,  267,
  313,  321,  111,  329,  115,  111,  184,  111,   16,   91,
   91,   91,  322,   91,   24,  334,  335,  337,  338,  233,
  339,  348,  351,  352,  353,   19,  355,  357,  373,  261,
  356,  358,  376,  381,  380,  383,  385,  389,  393,  397,
  398,  399,   91,  309,   91,   91,  400,  402,  404,  310,
    1,  115,  106,  197,  139,  115,  202,  134,  318,  198,
  206,  130,  226,  187,    1,  146,  115,  181,  111,  191,
  270,  274,   92,  297,   91,   91,   91,  367,  130,  387,
  345,  333,  336,  312,  326,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  344,    0,  175,  369,    0,
    0,    0,    0,    0,    0,   18,    0,    0,    0,   92,
   92,    0,   92,   92,   92,   92,   92,   92,    0,   92,
    0,    0,  207,    0,    0,  208,    0,    0,    0,    1,
   92,   92,   92,    0,   92,    0,    0,    0,  350,    0,
    0,  200,  217,    0,    0,    0,   18,  346,    0,   18,
    0,  201,  218,  364,    0,    0,    0,    0,    0,  360,
    0,    0,    0,   92,   18,   92,   92,    0,    0,  202,
  203,    0,    0,    9,    6,    7,    0,  377,  379,    0,
    0,    0,    0,  384,    0,    0,  386,    0,    0,    0,
    0,    0,  388,    0,  390,   92,   92,   92,   18,  392,
    0,    0,    9,    6,    7,    0,  396,    0,   91,  111,
   91,  112,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   91,    0,    0,  401,    0,    0,    0,    0,
   18,    0,  403,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,    0,    0,    0,    0,    0,   92,
    0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,  195,   18,    0,    0,    0,
   18,   18,    0,    0,    0,    0,    0,    0,    0,    0,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,    0,   18,    0,    0,    0,    0,
    0,    0,  195,  195,    0,  195,  195,  195,  195,  195,
  195,    0,  195,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  195,  195,  195,    0,  195,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  195,    0,  195,  195,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  109,    0,    0,    0,    0,    0,    0,  195,  195,
  195,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   46,  109,  109,
    0,  109,  109,  109,  109,  109,  109,    0,  109,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
  109,  109,    0,  109,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   46,   46,    0,    0,   46,   46,
   46,   46,   46,    0,   46,    0,    0,    0,    0,    0,
    0,    0,  109,    0,  109,  109,   46,   46,    0,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  109,  109,  109,    0,    0,    0,
   46,   46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  195,    0,  195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  195,    0,    0,    0,
    0,   46,   46,    0,    0,    0,    0,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  109,    0,
  109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  109,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,  109,  109,  109,   98,    0,    0,    0,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,    0,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,    0,   46,   46,   46,
    0,   98,   98,    0,   98,   98,   98,   98,   98,   98,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   98,   98,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   98,    0,   98,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0,    0,    0,    0,    0,    0,   98,   98,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   47,   61,   61,    0,
    0,   61,   61,   61,   61,   61,    0,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,    0,   61,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,   47,    0,    0,   47,   47,   47,
   47,   47,    0,   47,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   61,   61,   47,   47,    0,   47,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,   61,    0,    0,    0,   47,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
   47,   47,    0,    0,    0,    0,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   64,    0,    0,    0,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
    0,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,    0,   47,   47,   47,    0,
   64,   64,    0,    0,   64,   64,   64,   64,   64,    0,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   64,   64,    0,   64,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   64,   64,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
    0,    0,    0,    0,    0,    0,    0,   64,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,   63,   63,    0,    0,
   63,   63,   63,   63,   63,    0,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   63,   63,
    0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,    0,   37,    0,   37,   37,
   37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   63,   63,   37,   37,    0,   37,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   63,   63,    0,    0,    0,   37,   37,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
   37,    0,    0,    0,    0,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   50,    0,    0,    0,   37,    0,   37,   37,
   37,   37,   37,   37,   37,   37,   37,    0,   37,    0,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,    0,   37,   37,   37,    0,   50,
   50,    0,    0,   50,   50,   50,   50,   50,    0,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   50,   50,    0,   50,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   50,   50,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
    0,    0,    0,    0,    0,    0,   50,   50,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,   62,   62,    0,    0,   62,
   62,   62,   62,   62,    0,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,   62,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,   38,    0,   38,   38,   38,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,   62,   38,   38,    0,   38,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,   62,    0,    0,    0,   38,   38,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,   38,
    0,    0,    0,    0,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   52,    0,    0,    0,   38,    0,   38,   38,   38,
   38,   38,   38,   38,   38,   38,    0,   38,    0,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,    0,   38,   38,   38,   39,   52,   52,
    0,    0,   52,   52,   52,   52,   52,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   52,    0,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,    0,   39,    0,    0,   39,    0,
   39,   39,   39,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,   52,   39,   39,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
    0,   34,    0,    0,   34,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,   52,   52,    0,    0,    0,
   39,   39,   34,   34,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   35,    0,    0,
   35,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,   39,   39,    0,    0,    0,   34,   34,   35,   35,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,    0,   36,    0,    0,   36,
    0,    0,    0,    0,    0,    0,    0,   34,   34,    0,
    0,    0,   35,   35,   36,   36,    0,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   35,   35,    0,    0,    0,   36,   36,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,    0,    0,    0,    0,   39,    0,
   39,   39,   39,   39,   39,   39,   39,   39,   39,    0,
   39,    0,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,    0,   39,   39,   39,
    0,    0,    0,    0,   34,    0,   34,   34,   34,   34,
   34,   34,   34,   34,   34,    0,   34,    0,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,    0,   34,   34,   34,    0,    0,    0,    0,
   35,    0,   35,   35,   35,   35,   35,   35,   35,   35,
   35,    0,   35,    0,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,    0,   35,
   35,   35,   31,    0,    0,    0,   36,    0,   36,   36,
   36,   36,   36,   36,   36,   36,   36,    0,   36,    0,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,    0,   36,   36,   36,   32,    0,
   31,    0,    0,   31,    0,    0,   31,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   31,   31,    0,   31,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   33,    0,   32,    0,    0,   32,
    0,    0,   32,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   31,   31,   32,   32,    0,
   32,    0,    0,    0,    0,    0,    0,   26,    0,    0,
    0,    0,   33,    0,    0,   33,    0,    0,   33,    0,
    0,    0,    0,    0,    0,    0,   31,   31,    0,    0,
    0,   32,   32,   33,   33,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,   26,    0,    0,   26,    0,
    0,   26,  118,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   32,   32,    0,    0,   26,   33,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  118,    0,    0,  118,    0,   33,   33,
   26,   26,    0,    0,    0,    0,    0,    0,    0,    0,
  118,  118,    0,  116,    0,    0,    0,    0,    0,    0,
    0,  121,    0,    0,  121,    0,    0,    0,    0,    0,
    0,   26,   26,    0,    0,    0,    0,    0,  121,  121,
    0,    0,    0,    0,    0,  118,    0,    0,    0,    0,
    0,   14,    0,    0,  116,    0,    0,  116,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  116,  121,    0,  118,    0,  118,    0,    0,
    0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   14,    0,    0,   14,    0,    0,    0,    0,
    0,    0,    0,  121,    0,  121,  116,    0,    0,    0,
   14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   15,    0,    0,   15,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  116,    0,  116,    0,
    0,   15,    0,   31,   14,   31,   31,   31,   31,   31,
    0,    0,    0,    0,    0,   31,    0,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,    0,   31,   31,   31,   15,   14,    0,    0,   32,
    0,   32,   32,   32,   32,   32,    0,    0,    0,    0,
    0,   32,    0,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   15,   32,   32,
   32,   91,    0,    0,    0,   33,    0,   33,   33,   33,
   33,   33,    0,  118,    0,    0,    0,   33,    0,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,    0,   33,   33,   33,    0,   26,    0,
   26,  121,   26,   26,    0,    0,    0,    0,    0,    0,
   26,    0,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,    0,   26,   26,   26,
    0,    0,    0,    0,  116,    0,    0,    0,    0,    0,
    0,    0,    0,  118,    0,    0,    0,  118,  118,    0,
    0,    0,    0,    0,  118,    0,    0,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  121,  118,    0,    0,  121,  121,    0,    0,    0,
    0,    0,  121,    0,    0,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,    0,
  121,  125,  125,  125,  116,    0,  125,  125,  116,  116,
  125,  125,    0,    0,    0,  116,    0,    0,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,    0,  116,  127,  127,  127,    0,    0,  127,
  127,    0,   14,  127,  127,    0,    0,   14,  142,  166,
    0,    0,    0,    0,    0,  169,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
    0,   14,    0,   15,    0,    0,    0,    0,   15,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,    0,   15,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  166,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
    0,    0,    0,    0,    0,  125,    0,  127,    0,    0,
  125,    0,    0,    0,  125,  125,    0,    0,  237,    0,
  125,    0,    0,    0,  242,  243,    0,    0,  246,    0,
    0,  249,  112,  250,    0,    0,    0,  112,  127,  112,
    0,    0,    0,  127,  112,    0,    0,  127,  127,    0,
    0,    0,    0,  127,  125,  125,    0,  258,    0,    0,
  263,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,  127,    0,
  112,    0,    0,  111,    0,    0,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  166,  125,
    0,    0,  125,    0,  319,  320,    0,    0,    0,    0,
    0,    0,    0,    0,  112,  112,  111,    0,    0,  127,
    0,  111,    0,  111,    0,    0,    0,    0,  111,    0,
    0,    0,  127,    0,    0,  127,    0,    0,    0,    0,
  342,  343,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,    0,    0,    0,    0,    0,
    0,    0,  166,    0,  111,    0,    0,    0,    0,  125,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,    0,    0,
  125,    0,    0,    0,    0,    0,    0,    0,  166,  111,
    0,    0,  127,    0,  366,    0,    0,    0,    0,    0,
    0,  374,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  391,  112,  112,  112,  112,
  112,    0,  112,  112,    0,  112,  112,    0,  112,  112,
    0,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  111,  111,  111,  111,  111,    0,  111,  111,    0,  111,
  111,    0,  111,  111,    0,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  124,  124,  131,    0,    0,  135,
  136,    0,    0,  141,  143,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,    0,    0,    0,  161,  154,
    0,  307,    0,  159,  157,    0,  306,    0,  160,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  305,    0,  304,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  308,    0,    0,  156,    0,    0,  253,    0,
    0,    0,    0,  254,    0,    0,    0,    0,  256,    0,
    0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  155,    0,   91,    0,    0,
    0,    0,   90,    0,    0,    0,  161,  154,    0,  162,
    0,  159,  157,    0,  158,    0,  160,  277,  278,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  332,
  163,    0,    0,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  341,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  155,    0,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    6,    0,
    0,    0,    0,    0,    0,    0,    0,  359,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  372,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,    0,  147,    0,  298,  299,  300,  148,  149,
  150,  151,  301,  152,  302,  303,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
    0,  147,    0,    0,    0,   90,  148,  149,  150,  151,
   86,  152,   88,  153,    0,    0,    0,   87,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,    0,  111,    0,  111,   91,    0,
    0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  111,    0,
  115,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,    0,   13,   14,
    0,   15,   16,    0,   17,   18,   19,   20,   21,   22,
   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
   83,   84,   85,  119,  111,  111,  111,  111,  111,    0,
  111,  111,    0,  111,  111,    0,  111,  111,    0,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,    0,
    0,    0,    0,  111,    0,  111,  115,    0,    0,    0,
  111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,    0,    0,    0,    0,   86,    0,   88,
    0,  111,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  111,  111,  111,  111,  111,    0,  111,  111,
    0,  111,  111,    0,  111,  111,    0,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,    6,    7,    8,    9,
   10,    0,   11,   12,    0,   13,   14,    0,   15,   16,
    0,   17,   18,   19,   20,   21,   22,   23,   24,   25,
   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
  111,    0,    0,    0,    0,  111,    0,  111,    0,    0,
    0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  111,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,    0,    0,    0,    0,   86,
    0,   88,    0,  111,    0,    0,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  111,  111,  111,  111,  111,    0,
  111,  111,    0,  111,  111,    0,  111,  111,    0,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  111,  111,  111,  111,    6,    7,
    8,    9,   10,    0,    0,   12,    0,   13,   14,    0,
   15,   16,    0,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  122,    0,    0,    0,  123,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  222,    0,    0,    0,    0,    0,    6,
    0,  120,    0,    0,    0,    0,    0,    0,  223,    0,
    0,    0,  122,    0,    0,    0,  123,    0,    0,    0,
    0,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
   83,   84,   85,    0,    0,  121,    6,    7,    8,    9,
   10,    0,    0,   12,    0,   13,   14,    0,   15,   16,
    0,   17,   18,   19,   20,   21,   22,   23,   24,   25,
   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
  122,    0,    0,    0,  123,    0,    0,    0,    6,    0,
  120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  139,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,    0,    0,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    6,    0,  120,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
   56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
    6,    0,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
   82,   83,   84,   85,    0,    0,    0,    0,    6,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  223,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
   84,   85,
};
final static short yycheck[] = {                         41,
    0,    0,    0,    0,    0,   40,   38,   37,   60,    0,
   62,    0,   42,   40,   24,    9,   10,   47,  125,   13,
   24,   89,   16,  125,  121,  125,  125,  125,   22,   23,
   20,  123,   26,  241,   41,  162,   44,  342,   86,   87,
   43,  341,   45,   41,   41,   41,   44,   44,   44,  341,
   41,  184,   41,   44,  122,   44,  123,  190,  106,  260,
  261,   59,   94,   40,   91,  198,  307,  330,  123,  374,
  200,  201,  313,  336,  204,  205,  206,  262,  217,  218,
  219,  220,  221,  268,   59,   93,   93,  345,   88,   89,
  350,  351,  124,   92,  162,   93,   93,   93,  348,  349,
  350,  351,   93,  237,   93,  239,   46,  240,  371,   46,
  351,  207,  208,  209,  210,  181,  182,  211,  212,  259,
   58,    0,  355,  331,  213,  214,  370,  125,  125,  125,
  257,  215,  216,  132,  125,  346,  125,  123,   40,  139,
  130,  238,  271,   41,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,   37,   38,
  370,   40,   41,   42,   43,   44,   45,   93,   47,   44,
   40,   93,  274,  241,  274,  274,  274,  279,  270,   58,
   59,   60,   44,   62,  279,  265,  125,  352,   41,  257,
   93,   40,   40,   40,   40,  274,   41,   93,   41,  268,
   44,   43,   40,   93,   41,   41,   41,  125,  125,   41,
   41,   41,   91,  223,   93,   94,   41,   44,   41,  223,
    0,   93,  123,  123,  271,   41,  123,   93,  228,  123,
  123,   41,  259,  125,  341,  123,  125,   92,  125,  125,
  183,  199,    0,  222,  123,  124,  125,  334,   10,  358,
  267,  245,  251,  223,  239,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,  336,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,  344,   -1,   -1,  347,   -1,   -1,   -1,  341,
   58,   59,   60,   -1,   62,   -1,   -1,   -1,  308,   -1,
   -1,  343,  342,   -1,   -1,   -1,   41,  352,   -1,   44,
   -1,  353,  352,  333,   -1,   -1,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   91,   59,   93,   94,   -1,   -1,  371,
  372,   -1,   -1,  341,  341,  341,   -1,  347,  348,   -1,
   -1,   -1,   -1,  353,   -1,   -1,  356,   -1,   -1,   -1,
   -1,   -1,  361,   -1,  363,  123,  124,  125,   93,  368,
   -1,   -1,  370,  370,  370,   -1,  376,   -1,  257,  370,
  259,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,  394,   -1,   -1,   -1,   -1,
  125,   -1,  402,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,    0,  341,   -1,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,   -1,  370,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   59,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  372,  257,   -1,
  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,  372,    0,   -1,   -1,   -1,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,   -1,  370,  371,  372,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   59,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,  371,  372,    0,   -1,   -1,   -1,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
   -1,  355,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   59,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,  372,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,    0,   -1,   -1,   -1,  341,   -1,  343,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,   -1,  370,  371,  372,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   59,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
  372,    0,   -1,   -1,   -1,  341,   -1,  343,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,   -1,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,    0,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   38,   -1,   -1,   41,   -1,
   43,   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   59,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   93,   94,   59,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   93,   94,   59,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   93,   94,   59,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,  372,   -1,   -1,   -1,   -1,  341,   -1,
  343,  344,  345,  346,  347,  348,  349,  350,  351,   -1,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,   -1,  370,  371,  372,
   -1,   -1,   -1,   -1,  341,   -1,  343,  344,  345,  346,
  347,  348,  349,  350,  351,   -1,  353,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,
  341,   -1,  343,  344,  345,  346,  347,  348,  349,  350,
  351,   -1,  353,   -1,  355,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,    0,   -1,   -1,   -1,  341,   -1,  343,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,   -1,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,   -1,  370,  371,  372,    0,   -1,
   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   59,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,   93,   94,   59,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   59,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,  124,  125,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   93,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   93,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   59,   -1,  341,   93,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,   -1,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,   93,  125,   -1,   -1,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  355,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,  125,  370,  371,
  372,  259,   -1,   -1,   -1,  341,   -1,  343,  344,  345,
  346,  347,   -1,  271,   -1,   -1,   -1,  353,   -1,  355,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,   -1,  341,   -1,
  343,  271,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
  353,   -1,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,   -1,  370,  371,  372,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,   -1,  345,  346,   -1,
   -1,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,  341,  370,   -1,   -1,  345,  346,   -1,   -1,   -1,
   -1,   -1,  352,   -1,   -1,  355,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,    9,   10,   11,  341,   -1,   14,   15,  345,  346,
   18,   19,   -1,   -1,   -1,  352,   -1,   -1,  355,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,   -1,  370,    9,   10,   11,   -1,   -1,   14,
   15,   -1,  341,   18,   19,   -1,   -1,  346,   18,   24,
   -1,   -1,   -1,   -1,   -1,   25,  355,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
   -1,  370,   -1,  341,   -1,   -1,   -1,   -1,  346,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  122,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  104,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,  153,   -1,  122,   -1,   -1,
  158,   -1,   -1,   -1,  162,  163,   -1,   -1,  128,   -1,
  168,   -1,   -1,   -1,  134,  135,   -1,   -1,  138,   -1,
   -1,  141,   33,  143,   -1,   -1,   -1,   38,  153,   40,
   -1,   -1,   -1,  158,   45,   -1,   -1,  162,  163,   -1,
   -1,   -1,   -1,  168,  202,  203,   -1,  167,   -1,   -1,
  170,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  202,  203,   -1,
   91,   -1,   -1,    0,   -1,   -1,  244,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  223,  257,
   -1,   -1,  260,   -1,  229,  230,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  126,   33,   -1,   -1,  244,
   -1,   38,   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,   -1,
  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,   91,   -1,   -1,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,  126,
   -1,   -1,  337,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,  257,  258,  259,  260,
  261,   -1,  263,  264,   -1,  266,  267,   -1,  269,  270,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,   -1,  263,  264,   -1,  266,
  267,   -1,  269,  270,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,    9,   10,   11,   -1,   -1,   14,
   15,   -1,   -1,   18,   19,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,  153,   -1,
   -1,   -1,   -1,  158,   -1,   -1,   -1,   -1,  163,   -1,
   -1,   -1,   -1,  168,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,  126,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   47,  202,  203,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  244,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  260,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  337,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,   -1,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
   -1,  342,   -1,   -1,   -1,   33,  347,  348,  349,  350,
   38,  352,   40,  354,   -1,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  126,   -1,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,   -1,  263,  264,   -1,  266,  267,
   -1,  269,  270,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  257,  258,  259,  260,  261,   -1,
  263,  264,   -1,  266,  267,   -1,  269,  270,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   41,   -1,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,  126,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,  264,
   -1,  266,  267,   -1,  269,  270,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  257,  258,  259,  260,
  261,   -1,  263,  264,   -1,  266,  267,   -1,  269,  270,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   -1,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,  126,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,
  263,  264,   -1,  266,  267,   -1,  269,  270,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  257,  258,
  259,  260,  261,   -1,   -1,  264,   -1,  266,  267,   -1,
  269,  270,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  354,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,   -1,   -1,  343,  257,  258,  259,  260,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  270,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,  257,   -1,
  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  257,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  369,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,
};
final static short YYFINAL=2;
final static short YYMAXTOKEN=372;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'",null,"'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'","'_'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"Identifier","Literal",
"QuasiString","BlockMacro","DispatchMacro","CATCH","DEFINE","DISPATCH","ELSE",
"ENTER_POV","ESCAPE","FINALLY","FOR","IF","IN","LET","LOOP","MATCH","OBJECT",
"POV","SWITCH","THROW","TO","TRY","WHILE","ABSTRACT","AN","AS","BEHALF",
"BELIEF","BELIEVE","BELIEVES","BIND","CASE","CLASS","CONST","DEFAULT",
"DEFMACRO","DELEGATE","DEPRECATED","DO","ENCAPSULATE","ENCAPSULATED",
"ENCAPSULATES","ENSURE","ENUM","EVENTUAL","EVENTUALLY","EXISTS","EXPORT",
"EXTENDS","FINAL","FORALL","GIVEN","HIDDEN","HIDE","HIDES","IMPLEMENTS",
"IMPORT","INTERFACE","IS","ISA","KNOW","KNOWS","METHODS","NATIVE","ON",
"PACKAGE","PRIVATE","PROTECTED","PUBLIC","REQUIRE","SAKE","STATIC","STRUCT",
"SUCHTHAT","SYNCHRONIZED","THIS","THROWS","TRANSIENT","TYPEDEF","VIRTUAL",
"VOID","VOLATILE","EOL","OpFlrDiv","OpEq","OpGeq","OpLAnd","OpLOr","OpLeq",
"OpThru","OpTill","OpAsl","OpAsr","OpMod","OpNeq","OpPow","OpAss","OpAssAdd",
"OpAssAnd","OpAssAprxDiv","OpAssFlrDiv","OpAssAsl","OpAssAsr","OpAssRemdr",
"OpAssMod","OpAssMul","OpAssOr","OpAssPow","OpAssSub","OpAssXor","Send",
"MapsTo","MatchBind","MisMatch",
};
final static String yyrule[] = {
"$accept : start",
"start : optEOLs",
"start : expr",
"expr : optEOLs seqs optEOLs",
"seqs : seq",
"seqs : seqs EOLs seq",
"seq : assign",
"seq : assign ';'",
"seq : assign ';' seq",
"assign : cond",
"assign : cond OpAss assign",
"assign : cond assignop assign",
"assign : cond OpAssAsr assign",
"assign : DEFINE pattern OpAss assign",
"cond : condAnd",
"cond : cond OpLOr condAnd",
"condAnd : comp",
"condAnd : condAnd OpLAnd comp",
"comp : order",
"comp : order OpEq order",
"comp : order OpNeq order",
"comp : order '&' order",
"comp : order '|' order",
"comp : order '^' order",
"comp : order MatchBind pattern",
"comp : order MisMatch pattern",
"order : interval",
"order : interval OpLeq interval",
"order : interval '>' interval",
"order : interval OpGeq interval",
"order : interval '<' interval",
"interval : shift",
"interval : shift OpThru shift",
"interval : shift OpTill shift",
"shift : add",
"shift : shift OpAsl add",
"shift : shift OpAsr add",
"add : mult",
"add : add '+' mult",
"add : add '-' mult",
"mult : pow",
"mult : mult '*' pow",
"mult : mult '/' pow",
"mult : mult OpFlrDiv pow",
"mult : mult '%' pow",
"mult : mult OpMod pow",
"pow : call",
"pow : call OpPow call",
"call : unary",
"call : call verb '(' argList ')'",
"call : call verb",
"call : call Send verb '(' argList ')'",
"call : call Send verb",
"call : call Send '[' expr ']'",
"call : call Send '(' argList ')'",
"call : call Send unaryPattOp '(' ')'",
"call : call Send '-' '(' ')'",
"call : call Send binaryOp '(' expr ')'",
"call : call Send '-' '(' expr ')'",
"call : call Send OpPow '(' expr ')'",
"call : call Send OpPow OpMod '(' expr ',' expr ')'",
"unary : postfix",
"unary : unaryPattOp postfix",
"unary : '-' postfix",
"unary : '&' postfix",
"postfix : prim",
"postfix : postfix '(' argList ')'",
"postfix : postfix '[' expr ']'",
"postfix : postfix QuasiString",
"prim : noun",
"prim : Literal",
"prim : QuasiString",
"prim : parenExpr",
"prim : POV",
"prim : '[' assocList ']'",
"prim : ESCAPE pattern body",
"prim : LET body",
"prim : LOOP body",
"prim : LOOP pattern body",
"prim : THROW parenExpr",
"prim : ENTER_POV parenExpr body",
"prim : DISPATCH vtable",
"prim : method",
"prim : matcher",
"prim : ifExpr",
"prim : tryExpr",
"prim : OBJECT vtable",
"prim : SWITCH parenExpr mtable",
"prim : WHILE parenExpr body",
"prim : FOR assocPattern IN parenExpr forVerb body",
"prim : macro",
"noun : ident",
"noun : compoundName",
"body : '{' expr '}'",
"body : '{' '}'",
"method : TO msgPatt body",
"matcher : MATCH pattern body",
"parenExpr : '(' expr ')'",
"ifExpr : IF parenExpr body",
"ifExpr : IF parenExpr body ELSE ifExpr",
"ifExpr : IF parenExpr body ELSE body",
"tryExpr : TRY body CATCH pattern body optFinally",
"tryExpr : TRY body CATCH body optFinally",
"tryExpr : TRY body optFinally",
"macro : BlockMacro macroArg body optMacro",
"macro : DispatchMacro macroArg vtable optMacro",
"macroArg :",
"macroArg : parenExpr",
"macroArg : pattern",
"optMacro :",
"optMacro : macro",
"optEOLs :",
"optEOLs : EOLs",
"EOLs : EOL",
"EOLs : EOLs EOL",
"emptyList :",
"pattern : primPatt",
"pattern : primPatt ':' prim",
"primPatt : ident",
"primPatt : '_'",
"primPatt : OpEq prim",
"primPatt : '[' patternList ']'",
"primPatt : '[' patternList ']' '+' primPatt",
"primPatt : QuasiString",
"primPatt : noun QuasiString",
"patternList : emptyList",
"patternList : patterns",
"patterns : pattern",
"patterns : patterns ',' pattern",
"argList : emptyList",
"argList : args",
"args : expr",
"args : args ',' expr",
"assocList : emptyList",
"assocList : assocs",
"assocs : assoc",
"assocs : assocs ',' assoc",
"assoc : expr",
"assoc : expr MapsTo expr",
"assocPattern : pattern",
"assocPattern : pattern MapsTo pattern",
"verb : ident",
"ident : Identifier",
"ident : reserved",
"compoundName : ident '.' ident",
"compoundName : compoundName '.' ident",
"forVerb :",
"forVerb : verb",
"assignop : OpAssAdd",
"assignop : OpAssAnd",
"assignop : OpAssAprxDiv",
"assignop : OpAssFlrDiv",
"assignop : OpAssAsl",
"assignop : OpAssRemdr",
"assignop : OpAssMod",
"assignop : OpAssMul",
"assignop : OpAssOr",
"assignop : OpAssPow",
"assignop : OpAssSub",
"assignop : OpAssXor",
"unaryPattOp : '!'",
"unaryPattOp : '~'",
"binaryPattOp : '+'",
"binaryPattOp : '&'",
"binaryPattOp : '|'",
"binaryPattOp : '^'",
"binaryPattOp : '/'",
"binaryPattOp : OpFlrDiv",
"binaryPattOp : OpLeq",
"binaryPattOp : OpThru",
"binaryPattOp : OpTill",
"binaryPattOp : OpAsl",
"binaryPattOp : '%'",
"binaryPattOp : OpMod",
"binaryPattOp : '*'",
"binaryOp : binaryPattOp",
"binaryOp : '<'",
"binaryOp : OpGeq",
"binaryOp : '>'",
"binaryOp : OpLAnd",
"binaryOp : OpLOr",
"binaryOp : OpNeq",
"binaryOp : OpAsr",
"methodList : emptyList",
"methodList : methods",
"methods : method optEOLs",
"methods : methods method optEOLs",
"optMatcher :",
"optMatcher : matcher optEOLs",
"vtable : '{' optEOLs methodList optMatcher '}'",
"matcherList : emptyList",
"matcherList : matchers",
"matchers : matcher optEOLs",
"matchers : matchers matcher optEOLs",
"mtable : '{' optEOLs matcherList '}'",
"optFinally :",
"optFinally : FINALLY body",
"msgPatt :",
"msgPatt : verb",
"msgPatt : verb '(' patternList ')'",
"msgPatt : '(' patternList ')'",
"msgPatt : unaryPattOp",
"msgPatt : '-'",
"msgPatt : binaryPattOp pattern",
"msgPatt : '-' pattern",
"msgPatt : '[' pattern ']'",
"msgPatt : OpPow pattern",
"msgPatt : OpPow pattern OpMod pattern",
"reserved : ABSTRACT",
"reserved : AN",
"reserved : AS",
"reserved : BEHALF",
"reserved : BELIEF",
"reserved : BELIEVE",
"reserved : BELIEVES",
"reserved : BIND",
"reserved : CASE",
"reserved : CLASS",
"reserved : CONST",
"reserved : DEFAULT",
"reserved : DEFMACRO",
"reserved : DELEGATE",
"reserved : DEPRECATED",
"reserved : DO",
"reserved : ENCAPSULATE",
"reserved : ENCAPSULATED",
"reserved : ENCAPSULATES",
"reserved : ENSURE",
"reserved : ENUM",
"reserved : EVENTUAL",
"reserved : EVENTUALLY",
"reserved : EXISTS",
"reserved : EXPORT",
"reserved : EXTENDS",
"reserved : FINAL",
"reserved : FORALL",
"reserved : GIVEN",
"reserved : HIDDEN",
"reserved : HIDE",
"reserved : HIDES",
"reserved : IMPLEMENTS",
"reserved : IMPORT",
"reserved : INTERFACE",
"reserved : IS",
"reserved : ISA",
"reserved : KNOW",
"reserved : KNOWS",
"reserved : METHODS",
"reserved : NATIVE",
"reserved : ON",
"reserved : PACKAGE",
"reserved : PRIVATE",
"reserved : PROTECTED",
"reserved : PUBLIC",
"reserved : REQUIRE",
"reserved : SAKE",
"reserved : STATIC",
"reserved : STRUCT",
"reserved : SUCHTHAT",
"reserved : SYNCHRONIZED",
"reserved : THIS",
"reserved : THROWS",
"reserved : TRANSIENT",
"reserved : TYPEDEF",
"reserved : VIRTUAL",
"reserved : VOID",
"reserved : VOLATILE",
};

//#line 716 "ez.y"


/** contains all the tokens after myToken */
private EZLexer myLexer = null;

/** generated temp variable count */
private int myTempCount = 0;

private Expr myResult = null;

private PrintStream mySpamStream = null;

public yaccpar(EZLexer lexer) {
    this();
    myLexer = lexer;
}

public yaccpar(EZLexer lexer, PrintStream spamStream) {
    this(true);
    myLexer = lexer;
    mySpamStream = spamStream;
}


public Expr parseExpr() {
    if (yyparse() != 0) {
        yyerror("couldn't parse expression");
    }
    return myResult;
}


int yylex() {
    EZToken token = null;
    try {
        token = myLexer.nextToken();
    } catch (IOException ex) {
        yyerror("io: " + ex);
    }
    yytext = token.token();
    yylval = token;
    return token.tokenType();
}


void yyprintln(String s) {
    mySpamStream.println(s);
}


void yyerror(String s) {
    throw new SyntaxException(s);
}


/**
 * Report the exception in accociation with the current position, and
 * skip the rest of the line.
 */
public void diagnostic(Throwable ex, PrintStream errs) {
    myLexer.diagnostic(ex, errs);
    //   try {
    //       nextToken();
    //   } catch (IOException ex2) {
    //       throw new RuntimeException("while skipping line " + ex2);
    //   } catch (SyntaxException ex2) {
    //       throw new RuntimeException("while skipping line " + ex2);
    //   }
}


/* pretty self explanatory */
public boolean isEndOfFile() {
    return myLexer.isEndOfFile();
}



/*
*************************
* For use by the actions
*************************
*/


Vector with(Object sofar, Object next) {
    Vector result = (Vector)sofar;
    result.addElement(next);
    return result;
}


Vector list() {
    return new Vector();
}

Vector list(Object a) {
    return with(list(), a);
}

Vector list(Object a, Object b) {
    return with(list(a), b);
}


NounExpr noun(Object name) {
    return new NounExpr((String)name);
}

PathExpr compoundNoun(Object longName) {
    return new PathExpr((String)longName);
}


/**
 * generate 'unique' temporary variable names for transformations
 */
private String newTemp(String prefix) {
    return prefix + "$" + myTempCount++;
}

/**
 * Pattern Match stuff
 */

Pattern patternName(Object name) {
    return Pattern.name((String)name);
}

Pattern suchThat(Object pattern, Object condExpr) {
    return Pattern.suchThat((Pattern)pattern, (Expr)condExpr);
}

/**
 *   (== expr)  ->   (specimen : specimen == expr)
 */
Pattern patternEquals(Object expr) {
    String specimen = newTemp("specimen");
    return suchThat(patternName(specimen),
                    same(noun(specimen), (Expr)expr));
}

Pattern patternTuple(Object subPatterns) {
    return patternTuple(subPatterns, null);
}

Pattern patternTuple(Object subs, Object optRestPattern) {
    return Pattern.tuple(patterns(subs), (Pattern)optRestPattern);
}


Expr matchBind(Object specimen, Object pattern) {
    return new MatchBindExpr((Expr)specimen, (Pattern)pattern);
}

Expr define(Object pattern, Object rValue) {
    return new DefineExpr((Pattern)pattern, (Expr)rValue);
}

Expr condAnd(Object left, Object right) {
    return new CondAndExpr((Expr)left, (Expr)right);
}

Expr ifx(Object condExpr, Object thenExpr, Object elseExpr) {
    return new IfExpr((Expr)condExpr, (Expr)thenExpr, (Expr)elseExpr);
}

Expr ifx(Object condExpr, Object thenExpr) {
    return ifx(condExpr, thenExpr, nullExpr());
}

Expr condOr(Object left, Object right) {
    return ifx(left, trueExpr(), right);
}


/**
 *  parser `foo $bar baz $zip zorp`
 * ->
 *  parser valueMaker("foo $0 baz $1 zorp") make(bar, zip)
 */
Expr quasiExpr(Object parser, Object quasiString) {
    EZQuasiString q = (EZQuasiString)quasiString;
    if (q.patterns().size() > 0) {
        throw new SyntaxException("patterns not allowed in quasi-expression");
    }
    Expr exprMaker = call(parser, "valueMaker", list(q.template()));
    return call(exprMaker, "make", q.exprs());
}


/**
 *  parser `foo $bar baz @zip zorp`
 * ->
 *  x : parser matchMaker("foo $0 baz @0 zorp") match(bar, x) =~ [zip]
 */
Pattern quasiPattern(Object parser, Object quasiString) {
    String tempName = newTemp("q");
    EZQuasiString q = (EZQuasiString)quasiString;
    Expr matchMaker = call(parser, "matchMaker", list(q.template()));
    Vector exprs = with((Vector)q.exprs().clone(), noun(tempName));
    Expr matcher = call(matchMaker, "match", exprs);

    Pattern binds = patternTuple(q.patterns());
    Expr mb = new MatchBindExpr(matcher, binds);
    return Pattern.suchThat(Pattern.name(tempName), mb);
}



/**
 *  switch (expr) {
 *      match pattern1 { body1 }
 *      match pattern2 { body2 }
 *  }
 * ->
 *  let {
 *      define temp = expr
 *      if (temp =~ pattern1) {
 *          body1
 *      } else if (temp =~ pattern2) {
 *          body2
 *      } else {
 *          define ():false := temp
 *      }
 *  }
 */
Expr switchx(Object specimen, Object mtable) {
    String tempName = newTemp("specimen");
    Expr temp = noun(tempName);
    Expr defTemp = define(patternName(tempName), specimen);
    Expr result = define(suchThat(Pattern.ignore(), falseExpr()),
                         temp);
    MatchNode[] matchers = (MatchNode[])arrayFromVector((Vector)mtable,
                                                        MatchNode.class);
    for (int i = matchers.length -1; i >= 0; i--) {
        MatchNode m = matchers[i];
        result = ifx(matchBind(temp, m.pattern()),
                     m.body(),
                     result);
    }
    return let(sequence(defTemp, result));
}


Expr let(Object body) {
    return new LetExpr((Expr)body);
}


MsgPatt msgPatt(Object verb, Object parms) {
    return new MsgPatt((String)verb, patterns(parms));
}


private final Expr NULL_EXPR  = noun("null");
private final Expr FALSE_EXPR = noun("false");
private final Expr TRUE_EXPR  = noun("true");
private final Expr TUPLE_EXPR = noun("makeTuple");
private final Expr MAPPING_EXPR = compoundNoun("collect.MappingImpl");

Expr nullExpr()     { return NULL_EXPR; }
Expr falseExpr()    { return FALSE_EXPR; }
Expr trueExpr()     { return TRUE_EXPR; }
Expr tupleExpr()    { return TUPLE_EXPR; }
Expr mappingExpr()  { return MAPPING_EXPR; }


MethodNode method(Object msgPatt, Object bodyExpr) {
    MsgPatt patt = (MsgPatt)msgPatt;
    return new EZMethodNode(patt.verb(),
                            patt.patterns(),
                            (Expr)bodyExpr);
}

MatchNode matcher(Object pattern,
                  Object bodyExpr) {
    return new MatchNode((Pattern)pattern,
                         (Expr)bodyExpr);
}


Expr dispatch(Object methods, Object optMatcher) {
    NameTableEditor meths = new NameTableEditorImpl();
    for (Enumeration iter = ((Vector)methods).elements();
         iter.hasMoreElements(); ) {

        MethodNode meth = (MethodNode)iter.nextElement();
        try {
            meths.introduce(meth.mangle(), meth);
        } catch (AlreadyDefinedException e) {
            yyerror("Methods in a 'dispatch' must be uniquely named " + e);
        }
    }
    return new DispatchExpr(meths, (MatchNode)optMatcher);
}


Expr thunkify(Object bodyExpr) {
    return dispatch(list(method(msgPatt("run", list()),
                                bodyExpr)),
                    null);
}


Expr literal(Object token) {
    EZLiteral tok = (EZLiteral)token;
    return new LiteralExpr(tok.token(), tok.value());
}


/**
 * Caution: the argument must not have any characters that need to be
 * escaped in order to be presented in string literal format.
 */
Expr name(Object ident) {
    String str = (String)ident;
    return new LiteralExpr("\"" + str + "\"", str);
}


Expr path(Object base, Object ident) {
    return call(base, "get", list(name(ident)));
}


/**
 * [x, y, z]       ->  makeTuple(x, y, z)
 *
 * [x, a => y, z]  ->  collect.MappingImpl([0, a, 2], [x, y, z])
 */
Expr mapping(Object assocList) {
    Assoc[] assocs = (Assoc[])arrayFromVector((Vector)assocList, Assoc.class);
    boolean hasKey = false;
    Vector keys   = list();
    Vector values = list();
    for (int i = 0; i < assocs.length; i++) {
        Expr key = (Expr)assocs[i].optKey();
        if (key == null) {
            key = new LiteralExpr(""+i, BigInteger.valueOf(i));
        } else {
            hasKey = true;
        }
        keys = with(keys, key);
        values = with(values, (Expr)assocs[i].optValue());
    }
    Expr vs = call(tupleExpr(), "run", values);
    if (hasKey) {
        Expr ks = call(tupleExpr(), "run", keys);
        return call(mappingExpr(), "run", list(ks, vs));
    } else {
        return vs;
    }
}


Expr escape(Object pattern, Object bodyExpr) {
    return new EscapeExpr((Pattern)pattern, (Expr)bodyExpr);
}

Expr loop(Object bodyExpr) {
    return new LoopExpr((Expr)bodyExpr);
}

Expr tryx(Object expr,
            Object optPattern,
            Object optCatcher,
            Object optFinally) {
    return new TryExpr((Expr)expr,
                       (Pattern)optPattern,
                       (Expr)optCatcher,
                       (Expr)optFinally);
}

Expr throwx(Object problemExpr) {
    return new ThrowExpr((Expr)problemExpr);
}

Expr enterPov(Object povExpr, Object bodyExpr) {
    return new EnterPovExpr((Expr)povExpr, (Expr)bodyExpr);
}

/**
 * This is the expansion of 'object'. It contains some methods &
 * an optional matcher.  That is then wrapped in some
 * stuff which binds 'self' and 'return' to what you'd expect
 * them to be. it corresponds to
 *
 *  let { 
 *      define self := match [verb, args] {
 *          escape return {
 *              dispatch {
 *                  methods* [matcher]
 *              } perform(verb, args)
 *          }
 *      }
 *  }
 */
Expr object(Object vtable) {

    String verb = newTemp("verb");
    String args = newTemp("args");

    Expr performer = call((Expr)vtable, 
                          "perform",
                          list(noun(verb), noun(args)));

    MatchNode matcher = matcher(patternTuple(list(patternName(verb),
                                                patternName(args))),
                                escape(patternName("return"),
                                       performer));

    return let(define(patternName("self"),
                      dispatch(list(), matcher)));
}


/* 
 * The while loop expands as follows:
 *
 *  while (cond) { body }   ->
 *
 *  escape break {
 *      loop {
 *          if (cond) {
 *              escape continue { body }
 *          } else {
 *              break()
 *          }
 *      }
 *  }
 */
Expr whilex(Object condExpr, Object bodyExpr) {

    Expr forever = ifx(condExpr,
                       escape(patternName("continue"), bodyExpr),
                       call(noun("break"), "run", list()));

    return escape(patternName("break"), loop(forever));
}


/* 
 * The for loop has the following expansion:
 *
 *  for [kPattern =>] vPattern in (expr) [verb] { body }   ->
 *
 *  escape break {
 *      expr associations verb(to run(k, v) {
 *          if (k =~ kPattern && v =~ vPattern) {
 *              escape continue { body }
 *          }
 *      })
 *  }
 */
Expr forx(Object assoc,
          Object collExpr,
          Object forVerb,
          Object bodyExpr) {

    String kTemp = newTemp("key");
    String vTemp = newTemp("value");

    Assoc patterns = (Assoc)assoc;
    Pattern key = (Pattern)patterns.optKey();
    Pattern value = (Pattern)patterns.optValue();

    MsgPatt mpatt = msgPatt("run",
                            list(patternName(kTemp), patternName(vTemp)));

    Expr body = ifx(condAnd(matchBind(noun(kTemp), key),
                            matchBind(noun(vTemp), value)),
                    escape(patternName("continue"), bodyExpr));

    Expr closure = dispatch(list(method(mpatt, body)),
                            null);

    return escape(patternName("break"),
                  call(call(collExpr, "associations", list()),
                       (String)forVerb,
                       list(closure)));
}

/**
 *
 */
Expr macro(Object macroName,
           Object optMacroArg,
           Object macroBody,
           Object optNextMacro) {
    throw new Error("XXX Not yet implemented");
}


/**
 * Should be put into a more generic place
 */
static public Object[] arrayFromVector(Vector vec, Class elementType) {
    if (elementType.isPrimitive()) {
        throw new IllegalArgumentException("only reference types");
    }
    Object[] result = (Object[])Array.newInstance(elementType, vec.size());
    vec.copyInto(result);
    return result;
}

Expr[] exprs(Object vec) {
    return (Expr[])arrayFromVector((Vector)vec, Expr.class);
}

Pattern[] patterns(Object vec) {
    return (Pattern[])arrayFromVector((Vector)vec, Pattern.class);
}

Expr call(Object recipientExpr,
          Object verb,
          Object args) {
    return new CallExpr((Expr)recipientExpr,
                        (String)verb,
                        exprs(args));
}


Expr send(Object recipientExpr,
          Object verb,
          Object args) {
    return new SendExpr((Expr)recipientExpr,
                        (String)verb,
                        exprs(args));
}


Expr mod(Object val, Object modulus) {
    if (val instanceof CallExpr) {
        CallExpr ce = (CallExpr)val;
        RequestNode req = ce.request();
        Expr[] args = req.args();
        if (req.verb().equals("pow") && args.length == 1) {
            Expr base = ce.recipient();
            Expr exp = args[0];
            return call(base, "modPow", list(exp, modulus));
        }
    }
    return call(val, "mod", list(modulus));
}


Expr leq(Object x, Object y) {
    return call(x, "lessThanOrEqualTo", list(y));
}


Expr geq(Object x, Object y) {
    String temp = newTemp("left");
    return sequence(define(patternName(temp), (Expr)x),
                    leq(y, noun(temp)));
}

Expr not(Object x) {
    return call(x, "not", list());
}

Expr same(Object x, Object y) {
    return new EqualsExpr((Expr)x, (Expr)y);
}


Expr assign(Object lValue, Object rValue) {

    Expr lval = (Expr)lValue;
    Expr rval = (Expr)rValue;

    /*
     *  x ":=" z
     */
    if (lval instanceof NounExpr) {
        /* the base case */
        String name = ((NounExpr)lval).name();
        return new AssignExpr(name, rval);
    }
    if (lval instanceof CallExpr) {
        CallExpr ce = (CallExpr)lval;
        Expr recip = ce.recipient();
        RequestNode req = ce.request();
        String verb = req.verb();
        Expr[] args = req.args();

        /*
         *  x get(y) := z         ->  x put(y, z)
         *  x get(y1, y2) := z    ->  x put(y1, y2, z)
         *
         * Remember that x[y]     ->  x get(y)
         * and           x.name   ->  x get("name")
         * so both are valid lvalues
         */
        if (verb.equals("get")) {
            Expr[] newArgs = new Expr[args.length +1];
            System.arraycopy(args, 0, newArgs, 0, args.length);
            newArgs[args.length] = rval;
            return new CallExpr(recip, "put", newArgs);
        }
    }
    throw new SyntaxException("Assignment can only be done to nouns "
                              + "and collection elements");
}



Expr update(Object lValue, Object verb, Object rValue) {
    //XXX BUG Must avoid repeating lValue side effects

    return assign(lValue, call(lValue, verb, list(rValue)));
}

Expr assAsr(Object lValue, Object rValue) {

    return update(lValue, "shiftLeft", call(rValue, "negate", list()));
}


Expr sequence(Object x, Object y) {
    return new SequenceExpr((Expr)x, (Expr)y);
}


/*********************************/


static String[] TheTokens = new String[yyname.length];

/* Not provided for us */
public final static short EOF = 0;

static {
    System.arraycopy(yyname, 0, TheTokens, 0, yyname.length);

    /* printrep must not be a token */
    TheTokens[EOF]              = "end-of-file";
    TheTokens[Identifier]       = "non-keyword-identifier";
    TheTokens[Literal]          = "literal-value";
    TheTokens[QuasiString]      = "quasi-string";
    TheTokens[BlockMacro]       = "block-macro";
    TheTokens[DispatchMacro]    = "dispatch-macro";

    /* Keywords */
    TheTokens[CATCH]     = "catch";
    TheTokens[DEFINE]    = "define";
    TheTokens[DISPATCH]  = "dispatch";
    TheTokens[ELSE]      = "else";
    TheTokens[ENTER_POV] = "enterPov";
    TheTokens[FINALLY]   = "finally";
    TheTokens[FOR]       = "for";
    TheTokens[IF]        = "if";
    TheTokens[IN]        = "in";
    TheTokens[LET]       = "let";
    TheTokens[LOOP]      = "loop";
    TheTokens[ESCAPE]    = "escape";
    TheTokens[MATCH]     = "match";
    TheTokens[OBJECT]    = "object";
    TheTokens[POV]       = "pov";
    TheTokens[SWITCH]    = "switch";
    TheTokens[THROW]     = "throw";
    TheTokens[TO]        = "to";
    TheTokens[TRY]       = "try";
    TheTokens[WHILE]     = "while";

    /* reserved keywords */
    TheTokens[ABSTRACT]         = "abstract";
    TheTokens[AN]               = "an";
    TheTokens[AS]               = "as";
    TheTokens[BEHALF]           = "behalf";
    TheTokens[BELIEF]           = "belief";
    TheTokens[BELIEVE]          = "believe";
    TheTokens[BELIEVES]         = "believes";
    TheTokens[BIND]             = "bind";
    TheTokens[CASE]             = "case";
    TheTokens[CLASS]            = "class";
    TheTokens[CONST]            = "const";
    TheTokens[DEFAULT]          = "default";
    TheTokens[DEFMACRO]         = "defmacro";
    TheTokens[DELEGATE]         = "delegate";
    TheTokens[DEPRECATED]       = "deprecated";
    TheTokens[DO]               = "do";
    TheTokens[ENCAPSULATE]      = "encapsulate";
    TheTokens[ENCAPSULATED]     = "encapsulated";
    TheTokens[ENCAPSULATES]     = "encapsulates";
    TheTokens[ENSURE]           = "ensure";
    TheTokens[ENUM]             = "enum";
    TheTokens[EVENTUAL]         = "eventual";
    TheTokens[EVENTUALLY]       = "eventually";
    TheTokens[EXISTS]           = "exists";
    TheTokens[EXPORT]           = "export";
    TheTokens[EXTENDS]          = "extends";
    TheTokens[FINAL]            = "final";
    TheTokens[FORALL]           = "forall";
    TheTokens[GIVEN]            = "given";
    TheTokens[HIDDEN]           = "hidden";
    TheTokens[HIDE]             = "hide";
    TheTokens[HIDES]            = "hides";
    TheTokens[IMPLEMENTS]       = "implements";
    TheTokens[IMPORT]           = "import";
    TheTokens[INTERFACE]        = "interface";
    TheTokens[IS]               = "is";
    TheTokens[ISA]              = "isa";
    TheTokens[KNOW]             = "know";
    TheTokens[KNOWS]            = "knows";
    TheTokens[METHODS]          = "methods";
    TheTokens[NATIVE]           = "native";
    TheTokens[ON]               = "on";
    TheTokens[PACKAGE]          = "package";
    TheTokens[PRIVATE]          = "private";
    TheTokens[PROTECTED]        = "protected";
    TheTokens[PUBLIC]           = "public";
    TheTokens[REQUIRE]          = "require";
    TheTokens[SAKE]             = "sake";
    TheTokens[STATIC]           = "static";
    TheTokens[STRUCT]           = "struct";
    TheTokens[SUCHTHAT]         = "suchthat";
    TheTokens[SYNCHRONIZED]     = "synchronized";
    TheTokens[THIS]             = "this";
    TheTokens[THROWS]           = "throws";
    TheTokens[TRANSIENT]        = "transient";
    TheTokens[TYPEDEF]          = "typedef";
    TheTokens[VIRTUAL]          = "virtual";
    TheTokens[VOID]             = "void";
    TheTokens[VOLATILE]         = "volatile";

    /* The magical end-of-line token, not considered whitespace */
    TheTokens[EOL]      = "\n";

    /* Multi-Character Operators */
    TheTokens[OpFlrDiv] = "_/";
    TheTokens[OpEq]     = "==";
    TheTokens[OpGeq]    = ">=";
    TheTokens[OpLAnd]   = "&&";
    TheTokens[OpLOr]    = "||";
    TheTokens[OpLeq]    = "<=";
    TheTokens[OpThru]   = "..";
    TheTokens[OpTill]   = "..!";
    TheTokens[OpAsl]    = "<<";
    TheTokens[OpAsr]    = ">>";
    TheTokens[OpMod]    = "%%";
    TheTokens[OpNeq]    = "!=";
    TheTokens[OpPow]    = "**";

    TheTokens[OpAss]            = ":=";
    TheTokens[OpAssAdd]         = "+=";
    TheTokens[OpAssAnd]         = "&=";
    TheTokens[OpAssAprxDiv]     = "/=";
    TheTokens[OpAssFlrDiv]      = "_/=";
    TheTokens[OpAssAsl]         = "<<=";
    TheTokens[OpAssAsr]         = ">>=";
    TheTokens[OpAssRemdr]       = "%=";
    TheTokens[OpAssMod]         = "%%=";
    TheTokens[OpAssMul]         = "*=";
    TheTokens[OpAssOr]          = "|=";
    TheTokens[OpAssPow]         = "**=";
    TheTokens[OpAssSub]         = "-=";
    TheTokens[OpAssXor]         = "^=";

    /* Other funky tokens */
    TheTokens[Send]             = "<-";
    TheTokens[MapsTo]           = "=>";
    TheTokens[MatchBind]        = "=~";
    TheTokens[MisMatch]         = "!~";
}

static private Hashtable tokenTable(String[] tokens) {
    Hashtable result = new Hashtable();
    for (int i = 0; i < tokens.length; i++) {
        if (tokens[i] != null
            && result.put(tokens[i], new Integer(i)) != null) {

            throw new IllegalArgumentException
                ("conflicting token definitions");
        }
    }
    return result;
}

static public final Hashtable TheTokenTable = tokenTable(TheTokens);
//#line 2849 "yaccpar.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}
//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  char:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]+"");
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    yyval = val_peek(yym-1);   //get current semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 2:
//#line 104 "ez.y"
{ myResult = (Expr)val_peek(0); }
break;
case 3:
//#line 115 "ez.y"
{ yyval = val_peek(1); }
break;
case 5:
//#line 126 "ez.y"
{ yyval = sequence(val_peek(2), val_peek(0)); }
break;
case 8:
//#line 136 "ez.y"
{ yyval = sequence(val_peek(2), val_peek(0)); }
break;
case 10:
//#line 146 "ez.y"
{ yyval = assign(val_peek(2),     val_peek(0)); }
break;
case 11:
//#line 147 "ez.y"
{ yyval = update(val_peek(2), val_peek(1), val_peek(0)); }
break;
case 12:
//#line 148 "ez.y"
{ yyval = assAsr(val_peek(2),     val_peek(0)); }
break;
case 13:
//#line 150 "ez.y"
{ yyval = define(val_peek(2), val_peek(0)); }
break;
case 15:
//#line 159 "ez.y"
{ yyval = condOr(val_peek(2), val_peek(0)); }
break;
case 17:
//#line 168 "ez.y"
{ yyval = condAnd(val_peek(2), val_peek(0)); }
break;
case 19:
//#line 177 "ez.y"
{ yyval = same(val_peek(2), val_peek(0)); }
break;
case 20:
//#line 178 "ez.y"
{ yyval = not(same(val_peek(2), val_peek(0))); }
break;
case 21:
//#line 179 "ez.y"
{ yyval = call(val_peek(2), "and", list(val_peek(0))); }
break;
case 22:
//#line 180 "ez.y"
{ yyval = call(val_peek(2), "or", list(val_peek(0))); }
break;
case 23:
//#line 181 "ez.y"
{ yyval = call(val_peek(2), "xor", list(val_peek(0))); }
break;
case 24:
//#line 183 "ez.y"
{ yyval = matchBind(val_peek(2), val_peek(0)); }
break;
case 25:
//#line 184 "ez.y"
{ yyval = not(matchBind(val_peek(2), val_peek(0))); }
break;
case 27:
//#line 193 "ez.y"
{ yyval = leq(val_peek(2), val_peek(0)); }
break;
case 28:
//#line 194 "ez.y"
{ yyval = not(leq(val_peek(2), val_peek(0))); }
break;
case 29:
//#line 195 "ez.y"
{ yyval = geq(val_peek(2), val_peek(0)); }
break;
case 30:
//#line 196 "ez.y"
{ yyval = not(geq(val_peek(2), val_peek(0))); }
break;
case 32:
//#line 205 "ez.y"
{ yyval = call(val_peek(2), "thru", list(val_peek(0))); }
break;
case 33:
//#line 206 "ez.y"
{ yyval = call(val_peek(2), "till", list(val_peek(0))); }
break;
case 35:
//#line 215 "ez.y"
{ yyval = call(val_peek(2), "shiftLeft", list(val_peek(0))); }
break;
case 36:
//#line 216 "ez.y"
{ yyval = call(val_peek(2), "shiftLeft",
                                            list(call(val_peek(0), "negate", list())));
                                }
break;
case 38:
//#line 227 "ez.y"
{ yyval = call(val_peek(2), "add", list(val_peek(0))); }
break;
case 39:
//#line 228 "ez.y"
{ yyval = call(val_peek(2), "subtract", list(val_peek(0))); }
break;
case 41:
//#line 237 "ez.y"
{ yyval = call(val_peek(2), "multiply", list(val_peek(0))); }
break;
case 42:
//#line 238 "ez.y"
{ yyval = call(val_peek(2), "approxDivide", list(val_peek(0))); }
break;
case 43:
//#line 239 "ez.y"
{ yyval = call(val_peek(2), "floorDivide", list(val_peek(0))); }
break;
case 44:
//#line 240 "ez.y"
{ yyval = call(val_peek(2), "remainder", list(val_peek(0))); }
break;
case 45:
//#line 241 "ez.y"
{ yyval = mod(val_peek(2), val_peek(0)); }
break;
case 47:
//#line 250 "ez.y"
{ yyval = call(val_peek(2), "pow", list(val_peek(0))); }
break;
case 49:
//#line 259 "ez.y"
{ yyval = call(val_peek(4), val_peek(3), val_peek(1)); }
break;
case 50:
//#line 260 "ez.y"
{ yyval = call(val_peek(1), val_peek(0), list()); }
break;
case 51:
//#line 261 "ez.y"
{ yyval = send(val_peek(5), val_peek(3), val_peek(1)); }
break;
case 52:
//#line 262 "ez.y"
{ yyval = send(val_peek(2), val_peek(0), list()); }
break;
case 53:
//#line 267 "ez.y"
{ yyval = send(val_peek(4), "get", list(val_peek(1))); }
break;
case 54:
//#line 269 "ez.y"
{ yyval = send(val_peek(4), "run", val_peek(1)); }
break;
case 55:
//#line 270 "ez.y"
{ yyval = send(val_peek(4), val_peek(2), list()); }
break;
case 56:
//#line 271 "ez.y"
{ yyval = send(val_peek(4), "negate", list()); }
break;
case 57:
//#line 272 "ez.y"
{ yyval = send(val_peek(5), val_peek(3), list(val_peek(1))); }
break;
case 58:
//#line 273 "ez.y"
{ yyval = send(val_peek(5), val_peek(3), list(val_peek(1))); }
break;
case 59:
//#line 274 "ez.y"
{ yyval = send(val_peek(5), "pow", list(val_peek(1))); }
break;
case 60:
//#line 276 "ez.y"
{ yyval = send(val_peek(8), "modPow",
                                                    list(val_peek(4), val_peek(2))); }
break;
case 62:
//#line 286 "ez.y"
{ yyval = call(val_peek(0), val_peek(1), list()); }
break;
case 63:
//#line 287 "ez.y"
{ yyval = call(val_peek(0), "negate", list()); }
break;
case 64:
//#line 288 "ez.y"
{ yyerror("reserved: unary &"); }
break;
case 66:
//#line 297 "ez.y"
{ yyval = call(val_peek(3), "run", val_peek(1)); }
break;
case 67:
//#line 299 "ez.y"
{ yyval = call(val_peek(3), "get", list(val_peek(1))); }
break;
case 68:
//#line 300 "ez.y"
{ yyval = quasiExpr(val_peek(1), val_peek(0)); }
break;
case 70:
//#line 309 "ez.y"
{ yyval = literal(val_peek(0)); }
break;
case 71:
//#line 310 "ez.y"
{ yyval = quasiExpr(noun("sprintf"), val_peek(0));}
break;
case 73:
//#line 312 "ez.y"
{ yyval = new PovExpr(); }
break;
case 74:
//#line 313 "ez.y"
{ yyval = mapping(val_peek(1)); }
break;
case 75:
//#line 314 "ez.y"
{ yyval = escape(val_peek(1), val_peek(0)); }
break;
case 76:
//#line 315 "ez.y"
{ yyval = let(val_peek(0)); }
break;
case 77:
//#line 316 "ez.y"
{ yyval = loop(val_peek(0)); }
break;
case 78:
//#line 317 "ez.y"
{ yyval = escape(val_peek(1), loop(val_peek(0))); }
break;
case 79:
//#line 318 "ez.y"
{ yyval = throwx(val_peek(0)); }
break;
case 80:
//#line 319 "ez.y"
{ yyval = enterPov(val_peek(1), val_peek(0)); }
break;
case 81:
//#line 320 "ez.y"
{ yyval = val_peek(0); }
break;
case 82:
//#line 321 "ez.y"
{ yyval = dispatch(list(val_peek(0)), null); }
break;
case 83:
//#line 322 "ez.y"
{ yyval = dispatch(list(), val_peek(0)); }
break;
case 86:
//#line 325 "ez.y"
{ yyval = object(val_peek(0)); }
break;
case 87:
//#line 326 "ez.y"
{ yyval = switchx(val_peek(1), val_peek(0)); }
break;
case 88:
//#line 327 "ez.y"
{ yyval = whilex(val_peek(1), val_peek(0)); }
break;
case 89:
//#line 329 "ez.y"
{ yyval = forx(val_peek(4), val_peek(2), val_peek(1), val_peek(0)); }
break;
case 91:
//#line 338 "ez.y"
{ yyval = noun(val_peek(0)); }
break;
case 92:
//#line 339 "ez.y"
{ yyval = compoundNoun(val_peek(0)); }
break;
case 93:
//#line 349 "ez.y"
{ yyval = val_peek(1); }
break;
case 94:
//#line 350 "ez.y"
{ yyval = nullExpr(); }
break;
case 95:
//#line 365 "ez.y"
{ yyval = method(val_peek(1), val_peek(0)); }
break;
case 96:
//#line 380 "ez.y"
{ yyval = matcher(val_peek(1), val_peek(0)); }
break;
case 97:
//#line 389 "ez.y"
{ yyval = val_peek(1); }
break;
case 98:
//#line 398 "ez.y"
{ yyval = ifx(val_peek(1), val_peek(0)); }
break;
case 99:
//#line 399 "ez.y"
{ yyval = ifx(val_peek(3), val_peek(2), val_peek(0)); }
break;
case 100:
//#line 400 "ez.y"
{ yyval = ifx(val_peek(3), val_peek(2), val_peek(0)); }
break;
case 101:
//#line 405 "ez.y"
{ yyval = tryx(val_peek(4),   val_peek(2),  val_peek(1), val_peek(0));}
break;
case 102:
//#line 406 "ez.y"
{ yyval = tryx(val_peek(3), null,  val_peek(1), val_peek(0));}
break;
case 103:
//#line 407 "ez.y"
{ yyval = tryx(val_peek(1), null,null, val_peek(0));}
break;
case 104:
//#line 412 "ez.y"
{ yyval = macro(val_peek(3), val_peek(2), val_peek(1), val_peek(0)); }
break;
case 105:
//#line 413 "ez.y"
{ yyval = macro(val_peek(3), val_peek(2), val_peek(1), val_peek(0)); }
break;
case 106:
//#line 423 "ez.y"
{ yyval = null; }
break;
case 109:
//#line 429 "ez.y"
{ yyval = null; }
break;
case 115:
//#line 449 "ez.y"
{ yyval = list(); }
break;
case 117:
//#line 462 "ez.y"
{ yyval = suchThat(val_peek(2), val_peek(0)); }
break;
case 118:
//#line 466 "ez.y"
{ yyval = patternName(val_peek(0)); }
break;
case 119:
//#line 467 "ez.y"
{ yyval = Pattern.ignore(); }
break;
case 120:
//#line 468 "ez.y"
{ yyval = patternEquals(val_peek(0)); }
break;
case 121:
//#line 469 "ez.y"
{ yyval = patternTuple(val_peek(1)); }
break;
case 122:
//#line 470 "ez.y"
{ yyval = patternTuple(val_peek(3), val_peek(0)); }
break;
case 123:
//#line 471 "ez.y"
{ yyval = quasiPattern(noun("sscanf"),
                                                            val_peek(0)); }
break;
case 124:
//#line 473 "ez.y"
{ yyval = quasiPattern(val_peek(1), val_peek(0)); }
break;
case 127:
//#line 482 "ez.y"
{ yyval = list(val_peek(0)); }
break;
case 128:
//#line 483 "ez.y"
{ yyval = with(val_peek(2), val_peek(0)); }
break;
case 131:
//#line 492 "ez.y"
{ yyval = list(val_peek(0)); }
break;
case 132:
//#line 493 "ez.y"
{ yyval = with(val_peek(2), val_peek(0)); }
break;
case 135:
//#line 503 "ez.y"
{ yyval = list(val_peek(0)); }
break;
case 136:
//#line 504 "ez.y"
{ yyval = with(val_peek(2), val_peek(0)); }
break;
case 137:
//#line 508 "ez.y"
{ yyval = new Assoc(null, val_peek(0)); }
break;
case 138:
//#line 509 "ez.y"
{ yyval = new Assoc(val_peek(2),   val_peek(0)); }
break;
case 139:
//#line 513 "ez.y"
{ yyval = new Assoc(Pattern.ignore(),val_peek(0));}
break;
case 140:
//#line 514 "ez.y"
{ yyval = new Assoc(val_peek(2),   val_peek(0)); }
break;
case 142:
//#line 527 "ez.y"
{ yyval = ((EZToken)val_peek(0)).token(); }
break;
case 143:
//#line 528 "ez.y"
{ yyerror("reserved keyword: \""
                                                  + ((EZToken)val_peek(0)).token()
                                                  + "\""); }
break;
case 144:
//#line 534 "ez.y"
{ yyval = ((String)val_peek(2)) + "." + ((String)val_peek(0)); }
break;
case 145:
//#line 535 "ez.y"
{ yyval = ((String)val_peek(2)) + "." + ((String)val_peek(0)); }
break;
case 146:
//#line 543 "ez.y"
{ yyval = "each"; }
break;
case 148:
//#line 558 "ez.y"
{ yyval = "add"; }
break;
case 149:
//#line 559 "ez.y"
{ yyval = "and"; }
break;
case 150:
//#line 560 "ez.y"
{ yyval = "approxDivide"; }
break;
case 151:
//#line 561 "ez.y"
{ yyval = "floorDivide"; }
break;
case 152:
//#line 562 "ez.y"
{ yyval = "shiftLeft"; }
break;
case 153:
//#line 563 "ez.y"
{ yyval = "remainder"; }
break;
case 154:
//#line 564 "ez.y"
{ yyval = "mod"; }
break;
case 155:
//#line 565 "ez.y"
{ yyval = "multiply"; }
break;
case 156:
//#line 566 "ez.y"
{ yyval = "or"; }
break;
case 157:
//#line 567 "ez.y"
{ yyval = "pow"; }
break;
case 158:
//#line 568 "ez.y"
{ yyval = "subtract"; }
break;
case 159:
//#line 569 "ez.y"
{ yyval = "xor"; }
break;
case 160:
//#line 580 "ez.y"
{ yyval = "not"; }
break;
case 161:
//#line 581 "ez.y"
{ yyval = "complement"; }
break;
case 162:
//#line 593 "ez.y"
{ yyval = "add"; }
break;
case 163:
//#line 594 "ez.y"
{ yyval = "and"; }
break;
case 164:
//#line 595 "ez.y"
{ yyval = "or"; }
break;
case 165:
//#line 596 "ez.y"
{ yyval = "xor"; }
break;
case 166:
//#line 597 "ez.y"
{ yyval = "approxDivide"; }
break;
case 167:
//#line 598 "ez.y"
{ yyval = "floorDivide"; }
break;
case 168:
//#line 599 "ez.y"
{ yyval = "lessThanOrEqualTo"; }
break;
case 169:
//#line 600 "ez.y"
{ yyval = "thru"; }
break;
case 170:
//#line 601 "ez.y"
{ yyval = "till"; }
break;
case 171:
//#line 602 "ez.y"
{ yyval = "shiftLeft"; }
break;
case 172:
//#line 603 "ez.y"
{ yyval = "remainder"; }
break;
case 173:
//#line 604 "ez.y"
{ yyval = "mod"; }
break;
case 174:
//#line 605 "ez.y"
{ yyval = "multiply"; }
break;
case 185:
//#line 632 "ez.y"
{ yyval = list(val_peek(1)); }
break;
case 186:
//#line 633 "ez.y"
{ yyval = with(val_peek(2), val_peek(1)); }
break;
case 187:
//#line 637 "ez.y"
{ yyval = null; }
break;
case 189:
//#line 647 "ez.y"
{ yyval = dispatch(val_peek(2), val_peek(1)); }
break;
case 192:
//#line 657 "ez.y"
{ yyval = list(val_peek(1)); }
break;
case 193:
//#line 658 "ez.y"
{ yyval = with(val_peek(2), val_peek(1)); }
break;
case 194:
//#line 666 "ez.y"
{ yyval = val_peek(1); }
break;
case 195:
//#line 674 "ez.y"
{ yyval = null; }
break;
case 196:
//#line 675 "ez.y"
{ yyval = val_peek(0); }
break;
case 197:
//#line 683 "ez.y"
{ yyval = msgPatt("run",      list()); }
break;
case 198:
//#line 684 "ez.y"
{ yyval = msgPatt(val_peek(0),         list()); }
break;
case 199:
//#line 685 "ez.y"
{ yyval = msgPatt(val_peek(3),         val_peek(1)); }
break;
case 200:
//#line 686 "ez.y"
{ yyval = msgPatt("run",      val_peek(1)); }
break;
case 201:
//#line 687 "ez.y"
{ yyval = msgPatt(val_peek(0),         list()); }
break;
case 202:
//#line 688 "ez.y"
{ yyval = msgPatt("negate",   list()); }
break;
case 203:
//#line 689 "ez.y"
{ yyval = msgPatt(val_peek(1),         list(val_peek(0))); }
break;
case 204:
//#line 690 "ez.y"
{ yyval = msgPatt("subtract", list(val_peek(0))); }
break;
case 205:
//#line 691 "ez.y"
{ yyval = msgPatt("get",      list(val_peek(1))); }
break;
case 206:
//#line 692 "ez.y"
{ yyval = msgPatt("pow",      list(val_peek(0))); }
break;
case 207:
//#line 693 "ez.y"
{ yyval = msgPatt("modPow",   list(val_peek(2), val_peek(0))); }
break;
//#line 3621 "yaccpar.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method yyparse() ####################################



//## Constructor ################################################
public yaccpar()
{
}

public yaccpar(boolean debug_me)
{
  yydebug=debug_me;
}
//###############################################################



}
//################### END OF CLASS yaccpar ######################
